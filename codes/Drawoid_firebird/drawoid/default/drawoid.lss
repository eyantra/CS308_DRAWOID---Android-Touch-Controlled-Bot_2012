
drawoid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  000035a6  0000363a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bd0  0080031c  0080031c  00003756  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000434  00000000  00000000  00003776  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e59  00000000  00000000  00003baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001dd  00000000  00000000  00004a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013fd  00000000  00000000  00004be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00005fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000464  00000000  00000000  00006320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_5>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ea       	ldi	r30, 0xA6	; 166
      fc:	f5 e3       	ldi	r31, 0x35	; 53
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 31       	cpi	r26, 0x1C	; 28
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1e e0       	ldi	r17, 0x0E	; 14
     110:	ac e1       	ldi	r26, 0x1C	; 28
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 3e       	cpi	r26, 0xEC	; 236
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 c3 11 	call	0x2386	; 0x2386 <main>
     122:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <left_encoder_pin_config>:

/*! 
 * Function to configure INT4 (PORTE 4) pin as input for the left position encoder
 */
void left_encoder_pin_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     132:	ad e2       	ldi	r26, 0x2D	; 45
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	ed e2       	ldi	r30, 0x2D	; 45
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	8f 7e       	andi	r24, 0xEF	; 239
     13e:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     140:	ae e2       	ldi	r26, 0x2E	; 46
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	ee e2       	ldi	r30, 0x2E	; 46
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 61       	ori	r24, 0x10	; 16
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <right_encoder_pin_config>:

/*!
 * Function to configure INT5 (PORTE 5) pin as input for the right position encoder
 */
void right_encoder_pin_config (void)
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     15c:	ad e2       	ldi	r26, 0x2D	; 45
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ed e2       	ldi	r30, 0x2D	; 45
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8f 7d       	andi	r24, 0xDF	; 223
     168:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     16a:	ae e2       	ldi	r26, 0x2E	; 46
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ee e2       	ldi	r30, 0x2E	; 46
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	80 62       	ori	r24, 0x20	; 32
     176:	8c 93       	st	X, r24
}
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <left_position_encoder_interrupt_init>:

/*!
 * This function enables interrupt 4
 */
void left_position_encoder_interrupt_init (void)
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
 //cli(); //Clears the global interrupt
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     186:	aa e6       	ldi	r26, 0x6A	; 106
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	ea e6       	ldi	r30, 0x6A	; 106
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	82 60       	ori	r24, 0x02	; 2
     192:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     194:	ad e3       	ldi	r26, 0x3D	; 61
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	ed e3       	ldi	r30, 0x3D	; 61
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	80 61       	ori	r24, 0x10	; 16
     1a0:	8c 93       	st	X, r24
 //sei();   // Enables the global interrupt 
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <right_position_encoder_interrupt_init>:

/*!
 * This function enables interrupt 5
 */
void right_position_encoder_interrupt_init (void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
 //cli(); //Clears the global interrupt
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     1b0:	aa e6       	ldi	r26, 0x6A	; 106
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	ea e6       	ldi	r30, 0x6A	; 106
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 60       	ori	r24, 0x08	; 8
     1bc:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     1be:	ad e3       	ldi	r26, 0x3D	; 61
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	ed e3       	ldi	r30, 0x3D	; 61
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	80 62       	ori	r24, 0x20	; 32
     1ca:	8c 93       	st	X, r24
 //sei();   // Enables the global interrupt 
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <motion_pin_config>:

/*!
 * Initialize the motor ports
 */
void motion_pin_config (void) 
{
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     1da:	a1 e2       	ldi	r26, 0x21	; 33
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e1 e2       	ldi	r30, 0x21	; 33
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8f 60       	ori	r24, 0x0F	; 15
     1e6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     1e8:	a2 e2       	ldi	r26, 0x22	; 34
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	e2 e2       	ldi	r30, 0x22	; 34
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	80 7f       	andi	r24, 0xF0	; 240
     1f4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   // Setting PL3 and PL4 pins as output for PWM generation 
     1f6:	aa e0       	ldi	r26, 0x0A	; 10
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	ea e0       	ldi	r30, 0x0A	; 10
     1fc:	f1 e0       	ldi	r31, 0x01	; 1
     1fe:	80 81       	ld	r24, Z
     200:	88 61       	ori	r24, 0x18	; 24
     202:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; // PL3 and PL4 pins are for velocity control using PWM. 
     204:	ab e0       	ldi	r26, 0x0B	; 11
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	eb e0       	ldi	r30, 0x0B	; 11
     20a:	f1 e0       	ldi	r31, 0x01	; 1
     20c:	80 81       	ld	r24, Z
     20e:	88 61       	ori	r24, 0x18	; 24
     210:	8c 93       	st	X, r24
}
     212:	cf 91       	pop	r28
     214:	df 91       	pop	r29
     216:	08 95       	ret

00000218 <motion_port_init>:
/*!
 * Function to initialize all the devices
 */
 
void motion_port_init()
{
     218:	df 93       	push	r29
     21a:	cf 93       	push	r28
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
     220:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <motion_pin_config>
 left_encoder_pin_config(); //left encoder pin config
     224:	0e 94 95 00 	call	0x12a	; 0x12a <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
     228:	0e 94 aa 00 	call	0x154	; 0x154 <right_encoder_pin_config>
 left_position_encoder_interrupt_init();
     22c:	0e 94 bf 00 	call	0x17e	; 0x17e <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     230:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <right_position_encoder_interrupt_init>
}
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	08 95       	ret

0000023a <__vector_6>:

/*! 
 * ISR for right position encoder
 */
ISR(INT5_vect)  
{
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	8f 93       	push	r24
     246:	9f 93       	push	r25
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
     250:	80 91 20 03 	lds	r24, 0x0320
     254:	90 91 21 03 	lds	r25, 0x0321
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	90 93 21 03 	sts	0x0321, r25
     25e:	80 93 20 03 	sts	0x0320, r24
}
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <__vector_5>:

/*!
 * ISR for left position encoder
 */
ISR(INT4_vect)
{
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	df 93       	push	r29
     284:	cf 93       	push	r28
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
     28a:	80 91 22 03 	lds	r24, 0x0322
     28e:	90 91 23 03 	lds	r25, 0x0323
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	90 93 23 03 	sts	0x0323, r25
     298:	80 93 22 03 	sts	0x0322, r24
}
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <motion_set>:
 * This function moves the motor in the given direction
 * Direction --> 1 (forward)
 * Direction --> 0 (backward)
 */
void motion_set (unsigned char Direction)
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	0f 92       	push	r0
     2b4:	0f 92       	push	r0
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     2bc:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     2be:	8a 81       	ldd	r24, Y+2	; 0x02
     2c0:	8f 70       	andi	r24, 0x0F	; 15
     2c2:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
     2c4:	e2 e2       	ldi	r30, 0x22	; 34
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	80 7f       	andi	r24, 0xF0	; 240
     2d0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     2d2:	99 81       	ldd	r25, Y+1	; 0x01
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	89 2b       	or	r24, r25
     2d8:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
     2da:	e2 e2       	ldi	r30, 0x22	; 34
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	80 83       	st	Z, r24
}
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	cf 91       	pop	r28
     2e8:	df 91       	pop	r29
     2ea:	08 95       	ret

000002ec <forward>:

void forward (void) /*! both wheels forward */
{
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     2f4:	86 e0       	ldi	r24, 0x06	; 6
     2f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     2fa:	cf 91       	pop	r28
     2fc:	df 91       	pop	r29
     2fe:	08 95       	ret

00000300 <back>:

void back (void) /*! both wheels backward */
{
     300:	df 93       	push	r29
     302:	cf 93       	push	r28
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     308:	89 e0       	ldi	r24, 0x09	; 9
     30a:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <left>:

void left (void) /*! Left wheel backward, Right wheel forward */
{
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     31c:	85 e0       	ldi	r24, 0x05	; 5
     31e:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <right>:

void right (void) /*! Left wheel forward, Right wheel backward */
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     330:	8a e0       	ldi	r24, 0x0A	; 10
     332:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     336:	cf 91       	pop	r28
     338:	df 91       	pop	r29
     33a:	08 95       	ret

0000033c <soft_left>:

void soft_left (void) /*! Left wheel stationary, Right wheel forward */
{
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	08 95       	ret

00000350 <soft_right>:

void soft_right (void) /*! Left wheel forward, Right wheel is stationary */
{
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     35e:	cf 91       	pop	r28
     360:	df 91       	pop	r29
     362:	08 95       	ret

00000364 <soft_left_2>:

void soft_left_2 (void) /*! Left wheel backward, right wheel stationary */
{
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     372:	cf 91       	pop	r28
     374:	df 91       	pop	r29
     376:	08 95       	ret

00000378 <soft_right_2>:

void soft_right_2 (void) /*! Left wheel stationary, Right wheel backward */
{
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <stop>:

void stop (void)
{
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 57 01 	call	0x2ae	; 0x2ae <motion_set>
}
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <angle_rotate>:

/*!
 * This function turns the robot by specified degrees
 */
void angle_rotate(unsigned int Degrees)
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	2a 97       	sbiw	r28, 0x0a	; 10
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	9a 87       	std	Y+10, r25	; 0x0a
     3b6:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	8d 83       	std	Y+5, r24	; 0x05
     3c2:	9e 83       	std	Y+6, r25	; 0x06
     3c4:	af 83       	std	Y+7, r26	; 0x07
     3c6:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     3c8:	19 82       	std	Y+1, r1	; 0x01
     3ca:	1a 82       	std	Y+2, r1	; 0x02
     3cc:	1b 82       	std	Y+3, r1	; 0x03
     3ce:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.36; // division by resolution to get shaft count
     3d0:	89 85       	ldd	r24, Y+9	; 0x09
     3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d4:	cc 01       	movw	r24, r24
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__floatunsisf>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	bc 01       	movw	r22, r24
     3e8:	cd 01       	movw	r24, r26
     3ea:	2f e1       	ldi	r18, 0x1F	; 31
     3ec:	35 e8       	ldi	r19, 0x85	; 133
     3ee:	4b e8       	ldi	r20, 0x8B	; 139
     3f0:	50 e4       	ldi	r21, 0x40	; 64
     3f2:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__divsf3>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	8d 83       	std	Y+5, r24	; 0x05
     3fc:	9e 83       	std	Y+6, r25	; 0x06
     3fe:	af 83       	std	Y+7, r26	; 0x07
     400:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     402:	6d 81       	ldd	r22, Y+5	; 0x05
     404:	7e 81       	ldd	r23, Y+6	; 0x06
     406:	8f 81       	ldd	r24, Y+7	; 0x07
     408:	98 85       	ldd	r25, Y+8	; 0x08
     40a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	cc 01       	movw	r24, r24
     414:	a0 e0       	ldi	r26, 0x00	; 0
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	9a 83       	std	Y+2, r25	; 0x02
     41c:	ab 83       	std	Y+3, r26	; 0x03
     41e:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
     420:	10 92 21 03 	sts	0x0321, r1
     424:	10 92 20 03 	sts	0x0320, r1
 ShaftCountLeft = 0; 
     428:	10 92 23 03 	sts	0x0323, r1
     42c:	10 92 22 03 	sts	0x0322, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))	//change
     430:	80 91 20 03 	lds	r24, 0x0320
     434:	90 91 21 03 	lds	r25, 0x0321
     438:	9c 01       	movw	r18, r24
     43a:	44 27       	eor	r20, r20
     43c:	37 fd       	sbrc	r19, 7
     43e:	40 95       	com	r20
     440:	54 2f       	mov	r21, r20
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	ab 81       	ldd	r26, Y+3	; 0x03
     448:	bc 81       	ldd	r27, Y+4	; 0x04
     44a:	28 17       	cp	r18, r24
     44c:	39 07       	cpc	r19, r25
     44e:	4a 07       	cpc	r20, r26
     450:	5b 07       	cpc	r21, r27
     452:	90 f4       	brcc	.+36     	; 0x478 <angle_rotate+0xd8>
     454:	80 91 22 03 	lds	r24, 0x0322
     458:	90 91 23 03 	lds	r25, 0x0323
     45c:	9c 01       	movw	r18, r24
     45e:	44 27       	eor	r20, r20
     460:	37 fd       	sbrc	r19, 7
     462:	40 95       	com	r20
     464:	54 2f       	mov	r21, r20
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	ab 81       	ldd	r26, Y+3	; 0x03
     46c:	bc 81       	ldd	r27, Y+4	; 0x04
     46e:	28 17       	cp	r18, r24
     470:	39 07       	cpc	r19, r25
     472:	4a 07       	cpc	r20, r26
     474:	5b 07       	cpc	r21, r27
     476:	e0 f2       	brcs	.-72     	; 0x430 <angle_rotate+0x90>
  break;
 }
 stop(); //Stop action
     478:	0e 94 c6 01 	call	0x38c	; 0x38c <stop>
}
     47c:	2a 96       	adiw	r28, 0x0a	; 10
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	cf 91       	pop	r28
     48a:	df 91       	pop	r29
     48c:	08 95       	ret

0000048e <linear_distance_mm>:
 * This function movs the  
 * robot forward by specified distance
 */

void linear_distance_mm(unsigned int DistanceInMM)
{
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	2a 97       	sbiw	r28, 0x0a	; 10
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	9a 87       	std	Y+10, r25	; 0x0a
     4a4:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 e0       	ldi	r26, 0x00	; 0
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	8d 83       	std	Y+5, r24	; 0x05
     4b0:	9e 83       	std	Y+6, r25	; 0x06
     4b2:	af 83       	std	Y+7, r26	; 0x07
     4b4:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     4b6:	19 82       	std	Y+1, r1	; 0x01
     4b8:	1a 82       	std	Y+2, r1	; 0x02
     4ba:	1b 82       	std	Y+3, r1	; 0x03
     4bc:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 13.58; // division by resolution to get shaft count
     4be:	89 85       	ldd	r24, Y+9	; 0x09
     4c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c2:	cc 01       	movw	r24, r24
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__floatunsisf>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	bc 01       	movw	r22, r24
     4d6:	cd 01       	movw	r24, r26
     4d8:	2e ea       	ldi	r18, 0xAE	; 174
     4da:	37 e4       	ldi	r19, 0x47	; 71
     4dc:	49 e5       	ldi	r20, 0x59	; 89
     4de:	51 e4       	ldi	r21, 0x41	; 65
     4e0:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__divsf3>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	8d 83       	std	Y+5, r24	; 0x05
     4ea:	9e 83       	std	Y+6, r25	; 0x06
     4ec:	af 83       	std	Y+7, r26	; 0x07
     4ee:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     4f0:	6d 81       	ldd	r22, Y+5	; 0x05
     4f2:	7e 81       	ldd	r23, Y+6	; 0x06
     4f4:	8f 81       	ldd	r24, Y+7	; 0x07
     4f6:	98 85       	ldd	r25, Y+8	; 0x08
     4f8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	ab 83       	std	Y+3, r26	; 0x03
     506:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
     508:	10 92 21 03 	sts	0x0321, r1
     50c:	10 92 20 03 	sts	0x0320, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)//also adding count for left count
     510:	80 91 20 03 	lds	r24, 0x0320
     514:	90 91 21 03 	lds	r25, 0x0321
     518:	9c 01       	movw	r18, r24
     51a:	44 27       	eor	r20, r20
     51c:	37 fd       	sbrc	r19, 7
     51e:	40 95       	com	r20
     520:	54 2f       	mov	r21, r20
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	ab 81       	ldd	r26, Y+3	; 0x03
     528:	bc 81       	ldd	r27, Y+4	; 0x04
     52a:	82 17       	cp	r24, r18
     52c:	93 07       	cpc	r25, r19
     52e:	a4 07       	cpc	r26, r20
     530:	b5 07       	cpc	r27, r21
     532:	70 f7       	brcc	.-36     	; 0x510 <linear_distance_mm+0x82>
  {
  	break;
  }
 } 
 stop(); //Stop action
     534:	0e 94 c6 01 	call	0x38c	; 0x38c <stop>
}
     538:	2a 96       	adiw	r28, 0x0a	; 10
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <forward_mm>:
/*! 
 * This function moves the robot forward 
 * by DistanceInMM millimeters
 */
void forward_mm(unsigned int DistanceInMM)
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	0f 92       	push	r0
     550:	0f 92       	push	r0
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	9a 83       	std	Y+2, r25	; 0x02
     558:	89 83       	std	Y+1, r24	; 0x01
 forward();
     55a:	0e 94 76 01 	call	0x2ec	; 0x2ec <forward>
 linear_distance_mm(DistanceInMM);
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	0e 94 47 02 	call	0x48e	; 0x48e <linear_distance_mm>
}
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	cf 91       	pop	r28
     56c:	df 91       	pop	r29
     56e:	08 95       	ret

00000570 <back_mm>:
/*! 
 * This function moves the robot backward 
 * by DistanceInMM millimeters
 */
void back_mm(unsigned int DistanceInMM)
{
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	0f 92       	push	r0
     576:	0f 92       	push	r0
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	9a 83       	std	Y+2, r25	; 0x02
     57e:	89 83       	std	Y+1, r24	; 0x01
 back();
     580:	0e 94 80 01 	call	0x300	; 0x300 <back>
 linear_distance_mm(DistanceInMM);
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	0e 94 47 02 	call	0x48e	; 0x48e <linear_distance_mm>
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	cf 91       	pop	r28
     592:	df 91       	pop	r29
     594:	08 95       	ret

00000596 <left_degrees>:
/*! 
 * This function turns the robot to the left
 * by DistanceInMM millimeters
 */
void left_degrees(unsigned int Degrees) 
{
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	0f 92       	push	r0
     59c:	0f 92       	push	r0
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	89 83       	std	Y+1, r24	; 0x01
// 80 pulses for 360 degrees rotation 4.510 degrees per count
 left(); //Turn left
     5a6:	0e 94 8a 01 	call	0x314	; 0x314 <left>
 angle_rotate(Degrees);
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <angle_rotate>
}
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	cf 91       	pop	r28
     5b8:	df 91       	pop	r29
     5ba:	08 95       	ret

000005bc <right_degrees>:
/*! 
 * This function turns the robot to the right
 * by DistanceInMM millimeters
 */
void right_degrees(unsigned int Degrees)
{
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	0f 92       	push	r0
     5c2:	0f 92       	push	r0
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	89 83       	std	Y+1, r24	; 0x01
// 80 pulses for 360 degrees rotation 4.510 degrees per count
 right(); //Turn right
     5cc:	0e 94 94 01 	call	0x328	; 0x328 <right>
 angle_rotate(Degrees);
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <angle_rotate>
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	08 95       	ret

000005e2 <soft_left_degrees>:
/*! 
 * This function turns the robot to the left
 * softly by DistanceInMM millimeters
 */
void soft_left_degrees(unsigned int Degrees)
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	0f 92       	push	r0
     5e8:	0f 92       	push	r0
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_left(); //Turn soft left
     5f2:	0e 94 9e 01 	call	0x33c	; 0x33c <soft_left>
 Degrees=Degrees*2;
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	9a 83       	std	Y+2, r25	; 0x02
     600:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <angle_rotate>
}
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	08 95       	ret

00000614 <soft_right_degrees>:
 * Here it moves the left motor backwards
 * without moving the right motor to acheive
 * the desired movement
 */
void soft_right_degrees(unsigned int Degrees)
{
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	0f 92       	push	r0
     61a:	0f 92       	push	r0
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	9a 83       	std	Y+2, r25	; 0x02
     622:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_right_2();  //Turn soft right
     624:	0e 94 bc 01 	call	0x378	; 0x378 <soft_right_2>
 Degrees=Degrees*2;
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	9a 81       	ldd	r25, Y+2	; 0x02
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <angle_rotate>
}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	08 95       	ret

00000646 <soft_left_2_degrees>:
 * softly by DistanceInMM millimeters
 * The difference here is that is moves the right motor
 * forwards without moving the left motor
 */
void soft_left_2_degrees(unsigned int Degrees)
{
     646:	df 93       	push	r29
     648:	cf 93       	push	r28
     64a:	0f 92       	push	r0
     64c:	0f 92       	push	r0
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_left_2(); //Turn reverse soft left
     656:	0e 94 b2 01 	call	0x364	; 0x364 <soft_left_2>
 Degrees=Degrees*2;
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	9a 83       	std	Y+2, r25	; 0x02
     664:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	9a 81       	ldd	r25, Y+2	; 0x02
     66a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <angle_rotate>
}
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	cf 91       	pop	r28
     674:	df 91       	pop	r29
     676:	08 95       	ret

00000678 <soft_right_2_degrees>:
 * softly by DistanceInMM millimeters
 * It acheives this move by moving the left motor
 * forwards without moving the left motor
 */
void soft_right_2_degrees(unsigned int Degrees)
{
     678:	df 93       	push	r29
     67a:	cf 93       	push	r28
     67c:	0f 92       	push	r0
     67e:	0f 92       	push	r0
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	9a 83       	std	Y+2, r25	; 0x02
     686:	89 83       	std	Y+1, r24	; 0x01
 // 160 pulses for 360 degrees rotation 2.255 degrees per count
 soft_right_2();  //Turn reverse soft right
     688:	0e 94 bc 01 	call	0x378	; 0x378 <soft_right_2>
 Degrees=Degrees*2;
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <angle_rotate>
}
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <move_straight>:
 * This function moves the robot by dist mm according
 * to the direction, i.e. 1 -> forwards,
 * 0 -> backwards
 */
void move_straight(unsigned int dist,int direction)  //moves the bot in the given direction
{											//1 - forward    0 - backward
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <move_straight+0x6>
     6b0:	0f 92       	push	r0
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	9a 83       	std	Y+2, r25	; 0x02
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	7c 83       	std	Y+4, r23	; 0x04
     6bc:	6b 83       	std	Y+3, r22	; 0x03
	if(direction == 1)
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	91 05       	cpc	r25, r1
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <move_straight+0x28>
	{
		forward_mm(dist);
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	0e 94 a5 02 	call	0x54a	; 0x54a <forward_mm>
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <move_straight+0x30>
	}
	else
	{
		back_mm(dist);
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	0e 94 b8 02 	call	0x570	; 0x570 <back_mm>
	}
	stop();
     6da:	0e 94 c6 01 	call	0x38c	; 0x38c <stop>
}
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	cf 91       	pop	r28
     6e8:	df 91       	pop	r29
     6ea:	08 95       	ret

000006ec <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     6f4:	a7 e2       	ldi	r26, 0x27	; 39
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e7 e2       	ldi	r30, 0x27	; 39
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	87 6f       	ori	r24, 0xF7	; 247
     700:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     702:	a8 e2       	ldi	r26, 0x28	; 40
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	e8 e2       	ldi	r30, 0x28	; 40
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	80 78       	andi	r24, 0x80	; 128
     70e:	8c 93       	st	X, r24
}
     710:	cf 91       	pop	r28
     712:	df 91       	pop	r29
     714:	08 95       	ret

00000716 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	c0 57       	subi	r28, 0x70	; 112
     724:	d0 40       	sbci	r29, 0x00	; 0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	fe 01       	movw	r30, r28
     732:	e3 59       	subi	r30, 0x93	; 147
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	a0 e8       	ldi	r26, 0x80	; 128
     73c:	bf e3       	ldi	r27, 0x3F	; 63
     73e:	80 83       	st	Z, r24
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	a2 83       	std	Z+2, r26	; 0x02
     744:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     746:	8e 01       	movw	r16, r28
     748:	07 59       	subi	r16, 0x97	; 151
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
     74c:	fe 01       	movw	r30, r28
     74e:	e3 59       	subi	r30, 0x93	; 147
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	60 81       	ld	r22, Z
     754:	71 81       	ldd	r23, Z+1	; 0x01
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	93 81       	ldd	r25, Z+3	; 0x03
     75a:	26 e6       	ldi	r18, 0x66	; 102
     75c:	36 e6       	ldi	r19, 0x66	; 102
     75e:	46 e6       	ldi	r20, 0x66	; 102
     760:	55 e4       	ldi	r21, 0x45	; 69
     762:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	f8 01       	movw	r30, r16
     76c:	80 83       	st	Z, r24
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	a2 83       	std	Z+2, r26	; 0x02
     772:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     774:	fe 01       	movw	r30, r28
     776:	e7 59       	subi	r30, 0x97	; 151
     778:	ff 4f       	sbci	r31, 0xFF	; 255
     77a:	60 81       	ld	r22, Z
     77c:	71 81       	ldd	r23, Z+1	; 0x01
     77e:	82 81       	ldd	r24, Z+2	; 0x02
     780:	93 81       	ldd	r25, Z+3	; 0x03
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e8       	ldi	r20, 0x80	; 128
     788:	5f e3       	ldi	r21, 0x3F	; 63
     78a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     78e:	88 23       	and	r24, r24
     790:	44 f4       	brge	.+16     	; 0x7a2 <lcd_set_4bit+0x8c>
		__ticks = 1;
     792:	fe 01       	movw	r30, r28
     794:	e9 59       	subi	r30, 0x99	; 153
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	91 83       	std	Z+1, r25	; 0x01
     79e:	80 83       	st	Z, r24
     7a0:	64 c0       	rjmp	.+200    	; 0x86a <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     7a2:	fe 01       	movw	r30, r28
     7a4:	e7 59       	subi	r30, 0x97	; 151
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	60 81       	ld	r22, Z
     7aa:	71 81       	ldd	r23, Z+1	; 0x01
     7ac:	82 81       	ldd	r24, Z+2	; 0x02
     7ae:	93 81       	ldd	r25, Z+3	; 0x03
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	3f ef       	ldi	r19, 0xFF	; 255
     7b4:	4f e7       	ldi	r20, 0x7F	; 127
     7b6:	57 e4       	ldi	r21, 0x47	; 71
     7b8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     7bc:	18 16       	cp	r1, r24
     7be:	0c f0       	brlt	.+2      	; 0x7c2 <lcd_set_4bit+0xac>
     7c0:	43 c0       	rjmp	.+134    	; 0x848 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c2:	fe 01       	movw	r30, r28
     7c4:	e3 59       	subi	r30, 0x93	; 147
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	60 81       	ld	r22, Z
     7ca:	71 81       	ldd	r23, Z+1	; 0x01
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e2       	ldi	r20, 0x20	; 32
     7d6:	51 e4       	ldi	r21, 0x41	; 65
     7d8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	8e 01       	movw	r16, r28
     7e2:	09 59       	subi	r16, 0x99	; 153
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	f8 01       	movw	r30, r16
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
     7f8:	1f c0       	rjmp	.+62     	; 0x838 <lcd_set_4bit+0x122>
     7fa:	fe 01       	movw	r30, r28
     7fc:	eb 59       	subi	r30, 0x9B	; 155
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	80 e7       	ldi	r24, 0x70	; 112
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     808:	fe 01       	movw	r30, r28
     80a:	eb 59       	subi	r30, 0x9B	; 155
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <lcd_set_4bit+0xfc>
     816:	fe 01       	movw	r30, r28
     818:	eb 59       	subi	r30, 0x9B	; 155
     81a:	ff 4f       	sbci	r31, 0xFF	; 255
     81c:	91 83       	std	Z+1, r25	; 0x01
     81e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     820:	de 01       	movw	r26, r28
     822:	a9 59       	subi	r26, 0x99	; 153
     824:	bf 4f       	sbci	r27, 0xFF	; 255
     826:	fe 01       	movw	r30, r28
     828:	e9 59       	subi	r30, 0x99	; 153
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	9c 93       	st	X, r25
     836:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     838:	fe 01       	movw	r30, r28
     83a:	e9 59       	subi	r30, 0x99	; 153
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	d1 f6       	brne	.-76     	; 0x7fa <lcd_set_4bit+0xe4>
     846:	27 c0       	rjmp	.+78     	; 0x896 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     848:	8e 01       	movw	r16, r28
     84a:	09 59       	subi	r16, 0x99	; 153
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	fe 01       	movw	r30, r28
     850:	e7 59       	subi	r30, 0x97	; 151
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	93 81       	ldd	r25, Z+3	; 0x03
     85c:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	f8 01       	movw	r30, r16
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
     86a:	de 01       	movw	r26, r28
     86c:	ad 59       	subi	r26, 0x9D	; 157
     86e:	bf 4f       	sbci	r27, 0xFF	; 255
     870:	fe 01       	movw	r30, r28
     872:	e9 59       	subi	r30, 0x99	; 153
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	8d 93       	st	X+, r24
     87c:	9c 93       	st	X, r25
     87e:	fe 01       	movw	r30, r28
     880:	ed 59       	subi	r30, 0x9D	; 157
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	80 81       	ld	r24, Z
     886:	91 81       	ldd	r25, Z+1	; 0x01
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_set_4bit+0x172>
     88c:	fe 01       	movw	r30, r28
     88e:	ed 59       	subi	r30, 0x9D	; 157
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     896:	a8 e2       	ldi	r26, 0x28	; 40
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e8 e2       	ldi	r30, 0x28	; 40
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	8e 7f       	andi	r24, 0xFE	; 254
     8a2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     8a4:	a8 e2       	ldi	r26, 0x28	; 40
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e8 e2       	ldi	r30, 0x28	; 40
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	8d 7f       	andi	r24, 0xFD	; 253
     8b0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     8b2:	e8 e2       	ldi	r30, 0x28	; 40
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 e3       	ldi	r24, 0x30	; 48
     8b8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     8ba:	a8 e2       	ldi	r26, 0x28	; 40
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e8 e2       	ldi	r30, 0x28	; 40
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	84 60       	ori	r24, 0x04	; 4
     8c6:	8c 93       	st	X, r24
     8c8:	fe 01       	movw	r30, r28
     8ca:	e1 5a       	subi	r30, 0xA1	; 161
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	a0 ea       	ldi	r26, 0xA0	; 160
     8d4:	b0 e4       	ldi	r27, 0x40	; 64
     8d6:	80 83       	st	Z, r24
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	a2 83       	std	Z+2, r26	; 0x02
     8dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8de:	8e 01       	movw	r16, r28
     8e0:	05 5a       	subi	r16, 0xA5	; 165
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	fe 01       	movw	r30, r28
     8e6:	e1 5a       	subi	r30, 0xA1	; 161
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	60 81       	ld	r22, Z
     8ec:	71 81       	ldd	r23, Z+1	; 0x01
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	93 81       	ldd	r25, Z+3	; 0x03
     8f2:	26 e6       	ldi	r18, 0x66	; 102
     8f4:	36 e6       	ldi	r19, 0x66	; 102
     8f6:	46 e6       	ldi	r20, 0x66	; 102
     8f8:	55 e4       	ldi	r21, 0x45	; 69
     8fa:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	f8 01       	movw	r30, r16
     904:	80 83       	st	Z, r24
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	a2 83       	std	Z+2, r26	; 0x02
     90a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     90c:	fe 01       	movw	r30, r28
     90e:	e5 5a       	subi	r30, 0xA5	; 165
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 81       	ld	r22, Z
     914:	71 81       	ldd	r23, Z+1	; 0x01
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	93 81       	ldd	r25, Z+3	; 0x03
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     926:	88 23       	and	r24, r24
     928:	44 f4       	brge	.+16     	; 0x93a <lcd_set_4bit+0x224>
		__ticks = 1;
     92a:	fe 01       	movw	r30, r28
     92c:	e7 5a       	subi	r30, 0xA7	; 167
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	91 83       	std	Z+1, r25	; 0x01
     936:	80 83       	st	Z, r24
     938:	64 c0       	rjmp	.+200    	; 0xa02 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     93a:	fe 01       	movw	r30, r28
     93c:	e5 5a       	subi	r30, 0xA5	; 165
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	60 81       	ld	r22, Z
     942:	71 81       	ldd	r23, Z+1	; 0x01
     944:	82 81       	ldd	r24, Z+2	; 0x02
     946:	93 81       	ldd	r25, Z+3	; 0x03
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	4f e7       	ldi	r20, 0x7F	; 127
     94e:	57 e4       	ldi	r21, 0x47	; 71
     950:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     954:	18 16       	cp	r1, r24
     956:	0c f0       	brlt	.+2      	; 0x95a <lcd_set_4bit+0x244>
     958:	43 c0       	rjmp	.+134    	; 0x9e0 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     95a:	fe 01       	movw	r30, r28
     95c:	e1 5a       	subi	r30, 0xA1	; 161
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	60 81       	ld	r22, Z
     962:	71 81       	ldd	r23, Z+1	; 0x01
     964:	82 81       	ldd	r24, Z+2	; 0x02
     966:	93 81       	ldd	r25, Z+3	; 0x03
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e2       	ldi	r20, 0x20	; 32
     96e:	51 e4       	ldi	r21, 0x41	; 65
     970:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	8e 01       	movw	r16, r28
     97a:	07 5a       	subi	r16, 0xA7	; 167
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	f8 01       	movw	r30, r16
     98c:	91 83       	std	Z+1, r25	; 0x01
     98e:	80 83       	st	Z, r24
     990:	1f c0       	rjmp	.+62     	; 0x9d0 <lcd_set_4bit+0x2ba>
     992:	fe 01       	movw	r30, r28
     994:	e9 5a       	subi	r30, 0xA9	; 169
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	80 e7       	ldi	r24, 0x70	; 112
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
     9a0:	fe 01       	movw	r30, r28
     9a2:	e9 5a       	subi	r30, 0xA9	; 169
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	80 81       	ld	r24, Z
     9a8:	91 81       	ldd	r25, Z+1	; 0x01
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <lcd_set_4bit+0x294>
     9ae:	fe 01       	movw	r30, r28
     9b0:	e9 5a       	subi	r30, 0xA9	; 169
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	91 83       	std	Z+1, r25	; 0x01
     9b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b8:	de 01       	movw	r26, r28
     9ba:	a7 5a       	subi	r26, 0xA7	; 167
     9bc:	bf 4f       	sbci	r27, 0xFF	; 255
     9be:	fe 01       	movw	r30, r28
     9c0:	e7 5a       	subi	r30, 0xA7	; 167
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	11 96       	adiw	r26, 0x01	; 1
     9cc:	9c 93       	st	X, r25
     9ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d0:	fe 01       	movw	r30, r28
     9d2:	e7 5a       	subi	r30, 0xA7	; 167
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	d1 f6       	brne	.-76     	; 0x992 <lcd_set_4bit+0x27c>
     9de:	27 c0       	rjmp	.+78     	; 0xa2e <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e0:	8e 01       	movw	r16, r28
     9e2:	07 5a       	subi	r16, 0xA7	; 167
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
     9e6:	fe 01       	movw	r30, r28
     9e8:	e5 5a       	subi	r30, 0xA5	; 165
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	60 81       	ld	r22, Z
     9ee:	71 81       	ldd	r23, Z+1	; 0x01
     9f0:	82 81       	ldd	r24, Z+2	; 0x02
     9f2:	93 81       	ldd	r25, Z+3	; 0x03
     9f4:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	f8 01       	movw	r30, r16
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
     a02:	de 01       	movw	r26, r28
     a04:	ab 5a       	subi	r26, 0xAB	; 171
     a06:	bf 4f       	sbci	r27, 0xFF	; 255
     a08:	fe 01       	movw	r30, r28
     a0a:	e7 5a       	subi	r30, 0xA7	; 167
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	8d 93       	st	X+, r24
     a14:	9c 93       	st	X, r25
     a16:	fe 01       	movw	r30, r28
     a18:	eb 5a       	subi	r30, 0xAB	; 171
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <lcd_set_4bit+0x30a>
     a24:	fe 01       	movw	r30, r28
     a26:	eb 5a       	subi	r30, 0xAB	; 171
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	91 83       	std	Z+1, r25	; 0x01
     a2c:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a2e:	a8 e2       	ldi	r26, 0x28	; 40
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	e8 e2       	ldi	r30, 0x28	; 40
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8b 7f       	andi	r24, 0xFB	; 251
     a3a:	8c 93       	st	X, r24
     a3c:	fe 01       	movw	r30, r28
     a3e:	ef 5a       	subi	r30, 0xAF	; 175
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e8       	ldi	r26, 0x80	; 128
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	80 83       	st	Z, r24
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	a2 83       	std	Z+2, r26	; 0x02
     a50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a52:	8e 01       	movw	r16, r28
     a54:	03 5b       	subi	r16, 0xB3	; 179
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	fe 01       	movw	r30, r28
     a5a:	ef 5a       	subi	r30, 0xAF	; 175
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	60 81       	ld	r22, Z
     a60:	71 81       	ldd	r23, Z+1	; 0x01
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	26 e6       	ldi	r18, 0x66	; 102
     a68:	36 e6       	ldi	r19, 0x66	; 102
     a6a:	46 e6       	ldi	r20, 0x66	; 102
     a6c:	55 e4       	ldi	r21, 0x45	; 69
     a6e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	f8 01       	movw	r30, r16
     a78:	80 83       	st	Z, r24
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	a2 83       	std	Z+2, r26	; 0x02
     a7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a80:	fe 01       	movw	r30, r28
     a82:	e3 5b       	subi	r30, 0xB3	; 179
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	44 f4       	brge	.+16     	; 0xaae <lcd_set_4bit+0x398>
		__ticks = 1;
     a9e:	fe 01       	movw	r30, r28
     aa0:	e5 5b       	subi	r30, 0xB5	; 181
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	91 83       	std	Z+1, r25	; 0x01
     aaa:	80 83       	st	Z, r24
     aac:	64 c0       	rjmp	.+200    	; 0xb76 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     aae:	fe 01       	movw	r30, r28
     ab0:	e3 5b       	subi	r30, 0xB3	; 179
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	60 81       	ld	r22, Z
     ab6:	71 81       	ldd	r23, Z+1	; 0x01
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	3f ef       	ldi	r19, 0xFF	; 255
     ac0:	4f e7       	ldi	r20, 0x7F	; 127
     ac2:	57 e4       	ldi	r21, 0x47	; 71
     ac4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     ac8:	18 16       	cp	r1, r24
     aca:	0c f0       	brlt	.+2      	; 0xace <lcd_set_4bit+0x3b8>
     acc:	43 c0       	rjmp	.+134    	; 0xb54 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ace:	fe 01       	movw	r30, r28
     ad0:	ef 5a       	subi	r30, 0xAF	; 175
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	82 81       	ldd	r24, Z+2	; 0x02
     ada:	93 81       	ldd	r25, Z+3	; 0x03
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e2       	ldi	r20, 0x20	; 32
     ae2:	51 e4       	ldi	r21, 0x41	; 65
     ae4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	8e 01       	movw	r16, r28
     aee:	05 5b       	subi	r16, 0xB5	; 181
     af0:	1f 4f       	sbci	r17, 0xFF	; 255
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	f8 01       	movw	r30, r16
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
     b04:	1f c0       	rjmp	.+62     	; 0xb44 <lcd_set_4bit+0x42e>
     b06:	fe 01       	movw	r30, r28
     b08:	e7 5b       	subi	r30, 0xB7	; 183
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	80 e7       	ldi	r24, 0x70	; 112
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	80 83       	st	Z, r24
     b14:	fe 01       	movw	r30, r28
     b16:	e7 5b       	subi	r30, 0xB7	; 183
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	80 81       	ld	r24, Z
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <lcd_set_4bit+0x408>
     b22:	fe 01       	movw	r30, r28
     b24:	e7 5b       	subi	r30, 0xB7	; 183
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b2c:	de 01       	movw	r26, r28
     b2e:	a5 5b       	subi	r26, 0xB5	; 181
     b30:	bf 4f       	sbci	r27, 0xFF	; 255
     b32:	fe 01       	movw	r30, r28
     b34:	e5 5b       	subi	r30, 0xB5	; 181
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	11 96       	adiw	r26, 0x01	; 1
     b40:	9c 93       	st	X, r25
     b42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b44:	fe 01       	movw	r30, r28
     b46:	e5 5b       	subi	r30, 0xB5	; 181
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	d1 f6       	brne	.-76     	; 0xb06 <lcd_set_4bit+0x3f0>
     b52:	27 c0       	rjmp	.+78     	; 0xba2 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b54:	8e 01       	movw	r16, r28
     b56:	05 5b       	subi	r16, 0xB5	; 181
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	fe 01       	movw	r30, r28
     b5c:	e3 5b       	subi	r30, 0xB3	; 179
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	f8 01       	movw	r30, r16
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
     b76:	de 01       	movw	r26, r28
     b78:	a9 5b       	subi	r26, 0xB9	; 185
     b7a:	bf 4f       	sbci	r27, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	e5 5b       	subi	r30, 0xB5	; 181
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	8d 93       	st	X+, r24
     b88:	9c 93       	st	X, r25
     b8a:	fe 01       	movw	r30, r28
     b8c:	e9 5b       	subi	r30, 0xB9	; 185
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <lcd_set_4bit+0x47e>
     b98:	fe 01       	movw	r30, r28
     b9a:	e9 5b       	subi	r30, 0xB9	; 185
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     ba2:	a8 e2       	ldi	r26, 0x28	; 40
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e8 e2       	ldi	r30, 0x28	; 40
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     bb0:	a8 e2       	ldi	r26, 0x28	; 40
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e8 e2       	ldi	r30, 0x28	; 40
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8d 7f       	andi	r24, 0xFD	; 253
     bbc:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     bbe:	e8 e2       	ldi	r30, 0x28	; 40
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 e3       	ldi	r24, 0x30	; 48
     bc4:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     bc6:	a8 e2       	ldi	r26, 0x28	; 40
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e8 e2       	ldi	r30, 0x28	; 40
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	84 60       	ori	r24, 0x04	; 4
     bd2:	8c 93       	st	X, r24
     bd4:	fe 01       	movw	r30, r28
     bd6:	ed 5b       	subi	r30, 0xBD	; 189
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 ea       	ldi	r26, 0xA0	; 160
     be0:	b0 e4       	ldi	r27, 0x40	; 64
     be2:	80 83       	st	Z, r24
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	a2 83       	std	Z+2, r26	; 0x02
     be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bea:	8e 01       	movw	r16, r28
     bec:	01 5c       	subi	r16, 0xC1	; 193
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	fe 01       	movw	r30, r28
     bf2:	ed 5b       	subi	r30, 0xBD	; 189
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	26 e6       	ldi	r18, 0x66	; 102
     c00:	36 e6       	ldi	r19, 0x66	; 102
     c02:	46 e6       	ldi	r20, 0x66	; 102
     c04:	55 e4       	ldi	r21, 0x45	; 69
     c06:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	f8 01       	movw	r30, r16
     c10:	80 83       	st	Z, r24
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	a2 83       	std	Z+2, r26	; 0x02
     c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c18:	fe 01       	movw	r30, r28
     c1a:	ff 96       	adiw	r30, 0x3f	; 63
     c1c:	60 81       	ld	r22, Z
     c1e:	71 81       	ldd	r23, Z+1	; 0x01
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	93 81       	ldd	r25, Z+3	; 0x03
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     c30:	88 23       	and	r24, r24
     c32:	2c f4       	brge	.+10     	; 0xc3e <lcd_set_4bit+0x528>
		__ticks = 1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9e af       	std	Y+62, r25	; 0x3e
     c3a:	8d af       	std	Y+61, r24	; 0x3d
     c3c:	46 c0       	rjmp	.+140    	; 0xcca <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     c3e:	fe 01       	movw	r30, r28
     c40:	ff 96       	adiw	r30, 0x3f	; 63
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     c56:	18 16       	cp	r1, r24
     c58:	64 f5       	brge	.+88     	; 0xcb2 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5a:	fe 01       	movw	r30, r28
     c5c:	ed 5b       	subi	r30, 0xBD	; 189
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9e af       	std	Y+62, r25	; 0x3e
     c86:	8d af       	std	Y+61, r24	; 0x3d
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <lcd_set_4bit+0x592>
     c8a:	80 e7       	ldi	r24, 0x70	; 112
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9c af       	std	Y+60, r25	; 0x3c
     c90:	8b af       	std	Y+59, r24	; 0x3b
     c92:	8b ad       	ldd	r24, Y+59	; 0x3b
     c94:	9c ad       	ldd	r25, Y+60	; 0x3c
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <lcd_set_4bit+0x580>
     c9a:	9c af       	std	Y+60, r25	; 0x3c
     c9c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9e:	8d ad       	ldd	r24, Y+61	; 0x3d
     ca0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9e af       	std	Y+62, r25	; 0x3e
     ca6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca8:	8d ad       	ldd	r24, Y+61	; 0x3d
     caa:	9e ad       	ldd	r25, Y+62	; 0x3e
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	69 f7       	brne	.-38     	; 0xc8a <lcd_set_4bit+0x574>
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb2:	fe 01       	movw	r30, r28
     cb4:	ff 96       	adiw	r30, 0x3f	; 63
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	9e af       	std	Y+62, r25	; 0x3e
     cc8:	8d af       	std	Y+61, r24	; 0x3d
     cca:	8d ad       	ldd	r24, Y+61	; 0x3d
     ccc:	9e ad       	ldd	r25, Y+62	; 0x3e
     cce:	9a af       	std	Y+58, r25	; 0x3a
     cd0:	89 af       	std	Y+57, r24	; 0x39
     cd2:	89 ad       	ldd	r24, Y+57	; 0x39
     cd4:	9a ad       	ldd	r25, Y+58	; 0x3a
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <lcd_set_4bit+0x5c0>
     cda:	9a af       	std	Y+58, r25	; 0x3a
     cdc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cde:	a8 e2       	ldi	r26, 0x28	; 40
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 e2       	ldi	r30, 0x28	; 40
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8b 7f       	andi	r24, 0xFB	; 251
     cea:	8c 93       	st	X, r24
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a0 e8       	ldi	r26, 0x80	; 128
     cf2:	bf e3       	ldi	r27, 0x3F	; 63
     cf4:	8d ab       	std	Y+53, r24	; 0x35
     cf6:	9e ab       	std	Y+54, r25	; 0x36
     cf8:	af ab       	std	Y+55, r26	; 0x37
     cfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfc:	6d a9       	ldd	r22, Y+53	; 0x35
     cfe:	7e a9       	ldd	r23, Y+54	; 0x36
     d00:	8f a9       	ldd	r24, Y+55	; 0x37
     d02:	98 ad       	ldd	r25, Y+56	; 0x38
     d04:	26 e6       	ldi	r18, 0x66	; 102
     d06:	36 e6       	ldi	r19, 0x66	; 102
     d08:	46 e6       	ldi	r20, 0x66	; 102
     d0a:	55 e4       	ldi	r21, 0x45	; 69
     d0c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	89 ab       	std	Y+49, r24	; 0x31
     d16:	9a ab       	std	Y+50, r25	; 0x32
     d18:	ab ab       	std	Y+51, r26	; 0x33
     d1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d1c:	69 a9       	ldd	r22, Y+49	; 0x31
     d1e:	7a a9       	ldd	r23, Y+50	; 0x32
     d20:	8b a9       	ldd	r24, Y+51	; 0x33
     d22:	9c a9       	ldd	r25, Y+52	; 0x34
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e8       	ldi	r20, 0x80	; 128
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     d30:	88 23       	and	r24, r24
     d32:	2c f4       	brge	.+10     	; 0xd3e <lcd_set_4bit+0x628>
		__ticks = 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	98 ab       	std	Y+48, r25	; 0x30
     d3a:	8f a7       	std	Y+47, r24	; 0x2f
     d3c:	3f c0       	rjmp	.+126    	; 0xdbc <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     d3e:	69 a9       	ldd	r22, Y+49	; 0x31
     d40:	7a a9       	ldd	r23, Y+50	; 0x32
     d42:	8b a9       	ldd	r24, Y+51	; 0x33
     d44:	9c a9       	ldd	r25, Y+52	; 0x34
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	3f ef       	ldi	r19, 0xFF	; 255
     d4a:	4f e7       	ldi	r20, 0x7F	; 127
     d4c:	57 e4       	ldi	r21, 0x47	; 71
     d4e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     d52:	18 16       	cp	r1, r24
     d54:	4c f5       	brge	.+82     	; 0xda8 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d56:	6d a9       	ldd	r22, Y+53	; 0x35
     d58:	7e a9       	ldd	r23, Y+54	; 0x36
     d5a:	8f a9       	ldd	r24, Y+55	; 0x37
     d5c:	98 ad       	ldd	r25, Y+56	; 0x38
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e2       	ldi	r20, 0x20	; 32
     d64:	51 e4       	ldi	r21, 0x41	; 65
     d66:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	98 ab       	std	Y+48, r25	; 0x30
     d7c:	8f a7       	std	Y+47, r24	; 0x2f
     d7e:	0f c0       	rjmp	.+30     	; 0xd9e <lcd_set_4bit+0x688>
     d80:	80 e7       	ldi	r24, 0x70	; 112
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	9e a7       	std	Y+46, r25	; 0x2e
     d86:	8d a7       	std	Y+45, r24	; 0x2d
     d88:	8d a5       	ldd	r24, Y+45	; 0x2d
     d8a:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcd_set_4bit+0x676>
     d90:	9e a7       	std	Y+46, r25	; 0x2e
     d92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d94:	8f a5       	ldd	r24, Y+47	; 0x2f
     d96:	98 a9       	ldd	r25, Y+48	; 0x30
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	98 ab       	std	Y+48, r25	; 0x30
     d9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     da0:	98 a9       	ldd	r25, Y+48	; 0x30
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	69 f7       	brne	.-38     	; 0xd80 <lcd_set_4bit+0x66a>
     da6:	14 c0       	rjmp	.+40     	; 0xdd0 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da8:	69 a9       	ldd	r22, Y+49	; 0x31
     daa:	7a a9       	ldd	r23, Y+50	; 0x32
     dac:	8b a9       	ldd	r24, Y+51	; 0x33
     dae:	9c a9       	ldd	r25, Y+52	; 0x34
     db0:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	98 ab       	std	Y+48, r25	; 0x30
     dba:	8f a7       	std	Y+47, r24	; 0x2f
     dbc:	8f a5       	ldd	r24, Y+47	; 0x2f
     dbe:	98 a9       	ldd	r25, Y+48	; 0x30
     dc0:	9c a7       	std	Y+44, r25	; 0x2c
     dc2:	8b a7       	std	Y+43, r24	; 0x2b
     dc4:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc6:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <lcd_set_4bit+0x6b2>
     dcc:	9c a7       	std	Y+44, r25	; 0x2c
     dce:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     dd0:	a8 e2       	ldi	r26, 0x28	; 40
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e8 e2       	ldi	r30, 0x28	; 40
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     dde:	a8 e2       	ldi	r26, 0x28	; 40
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e2       	ldi	r30, 0x28	; 40
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     dec:	e8 e2       	ldi	r30, 0x28	; 40
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 e3       	ldi	r24, 0x30	; 48
     df2:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     df4:	a8 e2       	ldi	r26, 0x28	; 40
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e8 e2       	ldi	r30, 0x28	; 40
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	84 60       	ori	r24, 0x04	; 4
     e00:	8c 93       	st	X, r24
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 ea       	ldi	r26, 0xA0	; 160
     e08:	b0 e4       	ldi	r27, 0x40	; 64
     e0a:	8f a3       	std	Y+39, r24	; 0x27
     e0c:	98 a7       	std	Y+40, r25	; 0x28
     e0e:	a9 a7       	std	Y+41, r26	; 0x29
     e10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	6f a1       	ldd	r22, Y+39	; 0x27
     e14:	78 a5       	ldd	r23, Y+40	; 0x28
     e16:	89 a5       	ldd	r24, Y+41	; 0x29
     e18:	9a a5       	ldd	r25, Y+42	; 0x2a
     e1a:	26 e6       	ldi	r18, 0x66	; 102
     e1c:	36 e6       	ldi	r19, 0x66	; 102
     e1e:	46 e6       	ldi	r20, 0x66	; 102
     e20:	55 e4       	ldi	r21, 0x45	; 69
     e22:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	8b a3       	std	Y+35, r24	; 0x23
     e2c:	9c a3       	std	Y+36, r25	; 0x24
     e2e:	ad a3       	std	Y+37, r26	; 0x25
     e30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e32:	6b a1       	ldd	r22, Y+35	; 0x23
     e34:	7c a1       	ldd	r23, Y+36	; 0x24
     e36:	8d a1       	ldd	r24, Y+37	; 0x25
     e38:	9e a1       	ldd	r25, Y+38	; 0x26
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e8       	ldi	r20, 0x80	; 128
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     e46:	88 23       	and	r24, r24
     e48:	2c f4       	brge	.+10     	; 0xe54 <lcd_set_4bit+0x73e>
		__ticks = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9a a3       	std	Y+34, r25	; 0x22
     e50:	89 a3       	std	Y+33, r24	; 0x21
     e52:	3f c0       	rjmp	.+126    	; 0xed2 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     e54:	6b a1       	ldd	r22, Y+35	; 0x23
     e56:	7c a1       	ldd	r23, Y+36	; 0x24
     e58:	8d a1       	ldd	r24, Y+37	; 0x25
     e5a:	9e a1       	ldd	r25, Y+38	; 0x26
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     e68:	18 16       	cp	r1, r24
     e6a:	4c f5       	brge	.+82     	; 0xebe <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6c:	6f a1       	ldd	r22, Y+39	; 0x27
     e6e:	78 a5       	ldd	r23, Y+40	; 0x28
     e70:	89 a5       	ldd	r24, Y+41	; 0x29
     e72:	9a a5       	ldd	r25, Y+42	; 0x2a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	9a a3       	std	Y+34, r25	; 0x22
     e92:	89 a3       	std	Y+33, r24	; 0x21
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <lcd_set_4bit+0x79e>
     e96:	80 e7       	ldi	r24, 0x70	; 112
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	98 a3       	std	Y+32, r25	; 0x20
     e9c:	8f 8f       	std	Y+31, r24	; 0x1f
     e9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea0:	98 a1       	ldd	r25, Y+32	; 0x20
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <lcd_set_4bit+0x78c>
     ea6:	98 a3       	std	Y+32, r25	; 0x20
     ea8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eaa:	89 a1       	ldd	r24, Y+33	; 0x21
     eac:	9a a1       	ldd	r25, Y+34	; 0x22
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	9a a3       	std	Y+34, r25	; 0x22
     eb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb4:	89 a1       	ldd	r24, Y+33	; 0x21
     eb6:	9a a1       	ldd	r25, Y+34	; 0x22
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f7       	brne	.-38     	; 0xe96 <lcd_set_4bit+0x780>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	6b a1       	ldd	r22, Y+35	; 0x23
     ec0:	7c a1       	ldd	r23, Y+36	; 0x24
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	9e a1       	ldd	r25, Y+38	; 0x26
     ec6:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9a a3       	std	Y+34, r25	; 0x22
     ed0:	89 a3       	std	Y+33, r24	; 0x21
     ed2:	89 a1       	ldd	r24, Y+33	; 0x21
     ed4:	9a a1       	ldd	r25, Y+34	; 0x22
     ed6:	9e 8f       	std	Y+30, r25	; 0x1e
     ed8:	8d 8f       	std	Y+29, r24	; 0x1d
     eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
     edc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_set_4bit+0x7c8>
     ee2:	9e 8f       	std	Y+30, r25	; 0x1e
     ee4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     ee6:	a8 e2       	ldi	r26, 0x28	; 40
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e2       	ldi	r30, 0x28	; 40
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	8c 93       	st	X, r24
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 e8       	ldi	r26, 0x80	; 128
     efa:	bf e3       	ldi	r27, 0x3F	; 63
     efc:	89 8f       	std	Y+25, r24	; 0x19
     efe:	9a 8f       	std	Y+26, r25	; 0x1a
     f00:	ab 8f       	std	Y+27, r26	; 0x1b
     f02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	69 8d       	ldd	r22, Y+25	; 0x19
     f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0c:	26 e6       	ldi	r18, 0x66	; 102
     f0e:	36 e6       	ldi	r19, 0x66	; 102
     f10:	46 e6       	ldi	r20, 0x66	; 102
     f12:	55 e4       	ldi	r21, 0x45	; 69
     f14:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8d 8b       	std	Y+21, r24	; 0x15
     f1e:	9e 8b       	std	Y+22, r25	; 0x16
     f20:	af 8b       	std	Y+23, r26	; 0x17
     f22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f24:	6d 89       	ldd	r22, Y+21	; 0x15
     f26:	7e 89       	ldd	r23, Y+22	; 0x16
     f28:	8f 89       	ldd	r24, Y+23	; 0x17
     f2a:	98 8d       	ldd	r25, Y+24	; 0x18
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <lcd_set_4bit+0x830>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     f46:	6d 89       	ldd	r22, Y+21	; 0x15
     f48:	7e 89       	ldd	r23, Y+22	; 0x16
     f4a:	8f 89       	ldd	r24, Y+23	; 0x17
     f4c:	98 8d       	ldd	r25, Y+24	; 0x18
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	69 8d       	ldd	r22, Y+25	; 0x19
     f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <lcd_set_4bit+0x890>
     f88:	80 e7       	ldi	r24, 0x70	; 112
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	89 8b       	std	Y+17, r24	; 0x11
     f90:	89 89       	ldd	r24, Y+17	; 0x11
     f92:	9a 89       	ldd	r25, Y+18	; 0x12
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <lcd_set_4bit+0x87e>
     f98:	9a 8b       	std	Y+18, r25	; 0x12
     f9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	8b 89       	ldd	r24, Y+19	; 0x13
     f9e:	9c 89       	ldd	r25, Y+20	; 0x14
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9c 8b       	std	Y+20, r25	; 0x14
     fa4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8b 89       	ldd	r24, Y+19	; 0x13
     fa8:	9c 89       	ldd	r25, Y+20	; 0x14
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <lcd_set_4bit+0x872>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9c 8b       	std	Y+20, r25	; 0x14
     fc2:	8b 8b       	std	Y+19, r24	; 0x13
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	9c 89       	ldd	r25, Y+20	; 0x14
     fc8:	98 8b       	std	Y+16, r25	; 0x10
     fca:	8f 87       	std	Y+15, r24	; 0x0f
     fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fce:	98 89       	ldd	r25, Y+16	; 0x10
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <lcd_set_4bit+0x8ba>
     fd4:	98 8b       	std	Y+16, r25	; 0x10
     fd6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     fd8:	a8 e2       	ldi	r26, 0x28	; 40
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e2       	ldi	r30, 0x28	; 40
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8e 7f       	andi	r24, 0xFE	; 254
     fe4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     fe6:	a8 e2       	ldi	r26, 0x28	; 40
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e8 e2       	ldi	r30, 0x28	; 40
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8d 7f       	andi	r24, 0xFD	; 253
     ff2:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     ff4:	e8 e2       	ldi	r30, 0x28	; 40
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     ffc:	a8 e2       	ldi	r26, 0x28	; 40
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e8 e2       	ldi	r30, 0x28	; 40
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8c 93       	st	X, r24
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a0 e8       	ldi	r26, 0x80	; 128
    1010:	bf e3       	ldi	r27, 0x3F	; 63
    1012:	8b 87       	std	Y+11, r24	; 0x0b
    1014:	9c 87       	std	Y+12, r25	; 0x0c
    1016:	ad 87       	std	Y+13, r26	; 0x0d
    1018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101a:	6b 85       	ldd	r22, Y+11	; 0x0b
    101c:	7c 85       	ldd	r23, Y+12	; 0x0c
    101e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1020:	9e 85       	ldd	r25, Y+14	; 0x0e
    1022:	26 e6       	ldi	r18, 0x66	; 102
    1024:	36 e6       	ldi	r19, 0x66	; 102
    1026:	46 e6       	ldi	r20, 0x66	; 102
    1028:	55 e4       	ldi	r21, 0x45	; 69
    102a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	8f 83       	std	Y+7, r24	; 0x07
    1034:	98 87       	std	Y+8, r25	; 0x08
    1036:	a9 87       	std	Y+9, r26	; 0x09
    1038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    103a:	6f 81       	ldd	r22, Y+7	; 0x07
    103c:	78 85       	ldd	r23, Y+8	; 0x08
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e8       	ldi	r20, 0x80	; 128
    1048:	5f e3       	ldi	r21, 0x3F	; 63
    104a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    104e:	88 23       	and	r24, r24
    1050:	2c f4       	brge	.+10     	; 0x105c <lcd_set_4bit+0x946>
		__ticks = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	3f c0       	rjmp	.+126    	; 0x10da <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    105c:	6f 81       	ldd	r22, Y+7	; 0x07
    105e:	78 85       	ldd	r23, Y+8	; 0x08
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	9a 85       	ldd	r25, Y+10	; 0x0a
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	3f ef       	ldi	r19, 0xFF	; 255
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	57 e4       	ldi	r21, 0x47	; 71
    106c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    1070:	18 16       	cp	r1, r24
    1072:	4c f5       	brge	.+82     	; 0x10c6 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1074:	6b 85       	ldd	r22, Y+11	; 0x0b
    1076:	7c 85       	ldd	r23, Y+12	; 0x0c
    1078:	8d 85       	ldd	r24, Y+13	; 0x0d
    107a:	9e 85       	ldd	r25, Y+14	; 0x0e
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <lcd_set_4bit+0x9a6>
    109e:	80 e7       	ldi	r24, 0x70	; 112
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	9c 83       	std	Y+4, r25	; 0x04
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <lcd_set_4bit+0x994>
    10ae:	9c 83       	std	Y+4, r25	; 0x04
    10b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	69 f7       	brne	.-38     	; 0x109e <lcd_set_4bit+0x988>
    10c4:	14 c0       	rjmp	.+40     	; 0x10ee <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	8d 83       	std	Y+5, r24	; 0x05
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <lcd_set_4bit+0x9d0>
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	8c 93       	st	X, r24

	
}
    10fc:	c0 59       	subi	r28, 0x90	; 144
    10fe:	df 4f       	sbci	r29, 0xFF	; 255
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	2e 97       	sbiw	r28, 0x0e	; 14
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
    1128:	0e 94 76 03 	call	0x6ec	; 0x6ec <lcd_port_config>
	lcd_set_4bit();
    112c:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_set_4bit>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e8       	ldi	r26, 0x80	; 128
    1136:	bf e3       	ldi	r27, 0x3F	; 63
    1138:	8b 87       	std	Y+11, r24	; 0x0b
    113a:	9c 87       	std	Y+12, r25	; 0x0c
    113c:	ad 87       	std	Y+13, r26	; 0x0d
    113e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	6b 85       	ldd	r22, Y+11	; 0x0b
    1142:	7c 85       	ldd	r23, Y+12	; 0x0c
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	26 e6       	ldi	r18, 0x66	; 102
    114a:	36 e6       	ldi	r19, 0x66	; 102
    114c:	46 e6       	ldi	r20, 0x66	; 102
    114e:	55 e4       	ldi	r21, 0x45	; 69
    1150:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	98 87       	std	Y+8, r25	; 0x08
    115c:	a9 87       	std	Y+9, r26	; 0x09
    115e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1160:	6f 81       	ldd	r22, Y+7	; 0x07
    1162:	78 85       	ldd	r23, Y+8	; 0x08
    1164:	89 85       	ldd	r24, Y+9	; 0x09
    1166:	9a 85       	ldd	r25, Y+10	; 0x0a
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <lcd_init+0x6e>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <lcd_init+0xec>
	else if (__tmp > 65535)
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	4c f5       	brge	.+82     	; 0x11ec <lcd_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	6b 85       	ldd	r22, Y+11	; 0x0b
    119c:	7c 85       	ldd	r23, Y+12	; 0x0c
    119e:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <lcd_init+0xce>
    11c4:	80 e7       	ldi	r24, 0x70	; 112
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <lcd_init+0xbc>
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <lcd_init+0xb0>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <lcd_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <lcd_init+0xf8>
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1214:	88 e2       	ldi	r24, 0x28	; 40
    1216:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
	lcd_wr_command(0x01);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
	lcd_wr_command(0x06);
    1220:	86 e0       	ldi	r24, 0x06	; 6
    1222:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
	lcd_wr_command(0x0E);
    1226:	8e e0       	ldi	r24, 0x0E	; 14
    1228:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
	lcd_wr_command(0x80);
    122c:	80 e8       	ldi	r24, 0x80	; 128
    122e:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
	
		
}
    1232:	2e 96       	adiw	r28, 0x0e	; 14
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	6e 97       	sbiw	r28, 0x1e	; 30
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    125a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    125c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    125e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1260:	80 7f       	andi	r24, 0xF0	; 240
    1262:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1264:	a8 e2       	ldi	r26, 0x28	; 40
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e2       	ldi	r30, 0x28	; 40
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 70       	andi	r24, 0x0F	; 15
    1270:	8c 93       	st	X, r24
	lcd_port |= temp;
    1272:	a8 e2       	ldi	r26, 0x28	; 40
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e8 e2       	ldi	r30, 0x28	; 40
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	90 81       	ld	r25, Z
    127c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127e:	89 2b       	or	r24, r25
    1280:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1282:	a8 e2       	ldi	r26, 0x28	; 40
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e2       	ldi	r30, 0x28	; 40
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1290:	a8 e2       	ldi	r26, 0x28	; 40
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e2       	ldi	r30, 0x28	; 40
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8d 7f       	andi	r24, 0xFD	; 253
    129c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    129e:	a8 e2       	ldi	r26, 0x28	; 40
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e2       	ldi	r30, 0x28	; 40
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	84 60       	ori	r24, 0x04	; 4
    12aa:	8c 93       	st	X, r24
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 ea       	ldi	r26, 0xA0	; 160
    12b2:	b0 e4       	ldi	r27, 0x40	; 64
    12b4:	89 8f       	std	Y+25, r24	; 0x19
    12b6:	9a 8f       	std	Y+26, r25	; 0x1a
    12b8:	ab 8f       	std	Y+27, r26	; 0x1b
    12ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	69 8d       	ldd	r22, Y+25	; 0x19
    12be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c4:	26 e6       	ldi	r18, 0x66	; 102
    12c6:	36 e6       	ldi	r19, 0x66	; 102
    12c8:	46 e6       	ldi	r20, 0x66	; 102
    12ca:	55 e4       	ldi	r21, 0x45	; 69
    12cc:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8d 8b       	std	Y+21, r24	; 0x15
    12d6:	9e 8b       	std	Y+22, r25	; 0x16
    12d8:	af 8b       	std	Y+23, r26	; 0x17
    12da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12dc:	6d 89       	ldd	r22, Y+21	; 0x15
    12de:	7e 89       	ldd	r23, Y+22	; 0x16
    12e0:	8f 89       	ldd	r24, Y+23	; 0x17
    12e2:	98 8d       	ldd	r25, Y+24	; 0x18
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <lcd_wr_command+0xba>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	69 8d       	ldd	r22, Y+25	; 0x19
    1318:	7a 8d       	ldd	r23, Y+26	; 0x1a
    131a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    131c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9c 8b       	std	Y+20, r25	; 0x14
    133c:	8b 8b       	std	Y+19, r24	; 0x13
    133e:	0f c0       	rjmp	.+30     	; 0x135e <lcd_wr_command+0x11a>
    1340:	80 e7       	ldi	r24, 0x70	; 112
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	9a 8b       	std	Y+18, r25	; 0x12
    1346:	89 8b       	std	Y+17, r24	; 0x11
    1348:	89 89       	ldd	r24, Y+17	; 0x11
    134a:	9a 89       	ldd	r25, Y+18	; 0x12
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <lcd_wr_command+0x108>
    1350:	9a 8b       	std	Y+18, r25	; 0x12
    1352:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	8b 89       	ldd	r24, Y+19	; 0x13
    1356:	9c 89       	ldd	r25, Y+20	; 0x14
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9c 8b       	std	Y+20, r25	; 0x14
    135c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	8b 89       	ldd	r24, Y+19	; 0x13
    1360:	9c 89       	ldd	r25, Y+20	; 0x14
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <lcd_wr_command+0xfc>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6d 89       	ldd	r22, Y+21	; 0x15
    136a:	7e 89       	ldd	r23, Y+22	; 0x16
    136c:	8f 89       	ldd	r24, Y+23	; 0x17
    136e:	98 8d       	ldd	r25, Y+24	; 0x18
    1370:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	8b 89       	ldd	r24, Y+19	; 0x13
    137e:	9c 89       	ldd	r25, Y+20	; 0x14
    1380:	98 8b       	std	Y+16, r25	; 0x10
    1382:	8f 87       	std	Y+15, r24	; 0x0f
    1384:	8f 85       	ldd	r24, Y+15	; 0x0f
    1386:	98 89       	ldd	r25, Y+16	; 0x10
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <lcd_wr_command+0x144>
    138c:	98 8b       	std	Y+16, r25	; 0x10
    138e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1390:	a8 e2       	ldi	r26, 0x28	; 40
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e2       	ldi	r30, 0x28	; 40
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8b 7f       	andi	r24, 0xFB	; 251
    139c:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    139e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a0:	8f 70       	andi	r24, 0x0F	; 15
    13a2:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    13a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a6:	82 95       	swap	r24
    13a8:	80 7f       	andi	r24, 0xF0	; 240
    13aa:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    13ac:	a8 e2       	ldi	r26, 0x28	; 40
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e2       	ldi	r30, 0x28	; 40
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 70       	andi	r24, 0x0F	; 15
    13b8:	8c 93       	st	X, r24
	lcd_port |= cmd;
    13ba:	a8 e2       	ldi	r26, 0x28	; 40
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e8 e2       	ldi	r30, 0x28	; 40
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	90 81       	ld	r25, Z
    13c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c6:	89 2b       	or	r24, r25
    13c8:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    13ca:	a8 e2       	ldi	r26, 0x28	; 40
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e8 e2       	ldi	r30, 0x28	; 40
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8e 7f       	andi	r24, 0xFE	; 254
    13d6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    13d8:	a8 e2       	ldi	r26, 0x28	; 40
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e8 e2       	ldi	r30, 0x28	; 40
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8d 7f       	andi	r24, 0xFD	; 253
    13e4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    13e6:	a8 e2       	ldi	r26, 0x28	; 40
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e2       	ldi	r30, 0x28	; 40
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	8c 93       	st	X, r24
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a0 ea       	ldi	r26, 0xA0	; 160
    13fa:	b0 e4       	ldi	r27, 0x40	; 64
    13fc:	8b 87       	std	Y+11, r24	; 0x0b
    13fe:	9c 87       	std	Y+12, r25	; 0x0c
    1400:	ad 87       	std	Y+13, r26	; 0x0d
    1402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	7c 85       	ldd	r23, Y+12	; 0x0c
    1408:	8d 85       	ldd	r24, Y+13	; 0x0d
    140a:	9e 85       	ldd	r25, Y+14	; 0x0e
    140c:	26 e6       	ldi	r18, 0x66	; 102
    140e:	36 e6       	ldi	r19, 0x66	; 102
    1410:	46 e6       	ldi	r20, 0x66	; 102
    1412:	55 e4       	ldi	r21, 0x45	; 69
    1414:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8f 83       	std	Y+7, r24	; 0x07
    141e:	98 87       	std	Y+8, r25	; 0x08
    1420:	a9 87       	std	Y+9, r26	; 0x09
    1422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    1438:	88 23       	and	r24, r24
    143a:	2c f4       	brge	.+10     	; 0x1446 <lcd_wr_command+0x202>
		__ticks = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	3f c0       	rjmp	.+126    	; 0x14c4 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1446:	6f 81       	ldd	r22, Y+7	; 0x07
    1448:	78 85       	ldd	r23, Y+8	; 0x08
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	57 e4       	ldi	r21, 0x47	; 71
    1456:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    145a:	18 16       	cp	r1, r24
    145c:	4c f5       	brge	.+82     	; 0x14b0 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1460:	7c 85       	ldd	r23, Y+12	; 0x0c
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <lcd_wr_command+0x262>
    1488:	80 e7       	ldi	r24, 0x70	; 112
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	8b 83       	std	Y+3, r24	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <lcd_wr_command+0x250>
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	69 f7       	brne	.-38     	; 0x1488 <lcd_wr_command+0x244>
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b0:	6f 81       	ldd	r22, Y+7	; 0x07
    14b2:	78 85       	ldd	r23, Y+8	; 0x08
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <lcd_wr_command+0x28c>
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    14d8:	a8 e2       	ldi	r26, 0x28	; 40
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 e2       	ldi	r30, 0x28	; 40
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8b 7f       	andi	r24, 0xFB	; 251
    14e4:	8c 93       	st	X, r24
}
    14e6:	6e 96       	adiw	r28, 0x1e	; 30
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	6e 97       	sbiw	r28, 0x1e	; 30
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    150e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1510:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1514:	80 7f       	andi	r24, 0xF0	; 240
    1516:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1518:	a8 e2       	ldi	r26, 0x28	; 40
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e8 e2       	ldi	r30, 0x28	; 40
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 70       	andi	r24, 0x0F	; 15
    1524:	8c 93       	st	X, r24
	lcd_port |= temp;
    1526:	a8 e2       	ldi	r26, 0x28	; 40
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e8 e2       	ldi	r30, 0x28	; 40
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	90 81       	ld	r25, Z
    1530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1532:	89 2b       	or	r24, r25
    1534:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1536:	a8 e2       	ldi	r26, 0x28	; 40
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e8 e2       	ldi	r30, 0x28	; 40
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1544:	a8 e2       	ldi	r26, 0x28	; 40
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e2       	ldi	r30, 0x28	; 40
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8d 7f       	andi	r24, 0xFD	; 253
    1550:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1552:	a8 e2       	ldi	r26, 0x28	; 40
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e2       	ldi	r30, 0x28	; 40
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	84 60       	ori	r24, 0x04	; 4
    155e:	8c 93       	st	X, r24
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a0 ea       	ldi	r26, 0xA0	; 160
    1566:	b0 e4       	ldi	r27, 0x40	; 64
    1568:	89 8f       	std	Y+25, r24	; 0x19
    156a:	9a 8f       	std	Y+26, r25	; 0x1a
    156c:	ab 8f       	std	Y+27, r26	; 0x1b
    156e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1570:	69 8d       	ldd	r22, Y+25	; 0x19
    1572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1578:	26 e6       	ldi	r18, 0x66	; 102
    157a:	36 e6       	ldi	r19, 0x66	; 102
    157c:	46 e6       	ldi	r20, 0x66	; 102
    157e:	55 e4       	ldi	r21, 0x45	; 69
    1580:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8d 8b       	std	Y+21, r24	; 0x15
    158a:	9e 8b       	std	Y+22, r25	; 0x16
    158c:	af 8b       	std	Y+23, r26	; 0x17
    158e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <lcd_wr_char+0xba>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9c 8b       	std	Y+20, r25	; 0x14
    15ae:	8b 8b       	std	Y+19, r24	; 0x13
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    15b2:	6d 89       	ldd	r22, Y+21	; 0x15
    15b4:	7e 89       	ldd	r23, Y+22	; 0x16
    15b6:	8f 89       	ldd	r24, Y+23	; 0x17
    15b8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
    15be:	4f e7       	ldi	r20, 0x7F	; 127
    15c0:	57 e4       	ldi	r21, 0x47	; 71
    15c2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    15c6:	18 16       	cp	r1, r24
    15c8:	4c f5       	brge	.+82     	; 0x161c <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ca:	69 8d       	ldd	r22, Y+25	; 0x19
    15cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e2       	ldi	r20, 0x20	; 32
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9c 8b       	std	Y+20, r25	; 0x14
    15f0:	8b 8b       	std	Y+19, r24	; 0x13
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <lcd_wr_char+0x11a>
    15f4:	80 e7       	ldi	r24, 0x70	; 112
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	9a 8b       	std	Y+18, r25	; 0x12
    15fa:	89 8b       	std	Y+17, r24	; 0x11
    15fc:	89 89       	ldd	r24, Y+17	; 0x11
    15fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <lcd_wr_char+0x108>
    1604:	9a 8b       	std	Y+18, r25	; 0x12
    1606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	8b 89       	ldd	r24, Y+19	; 0x13
    160a:	9c 89       	ldd	r25, Y+20	; 0x14
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9c 8b       	std	Y+20, r25	; 0x14
    1610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1612:	8b 89       	ldd	r24, Y+19	; 0x13
    1614:	9c 89       	ldd	r25, Y+20	; 0x14
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	69 f7       	brne	.-38     	; 0x15f4 <lcd_wr_char+0xfc>
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161c:	6d 89       	ldd	r22, Y+21	; 0x15
    161e:	7e 89       	ldd	r23, Y+22	; 0x16
    1620:	8f 89       	ldd	r24, Y+23	; 0x17
    1622:	98 8d       	ldd	r25, Y+24	; 0x18
    1624:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	98 8b       	std	Y+16, r25	; 0x10
    1636:	8f 87       	std	Y+15, r24	; 0x0f
    1638:	8f 85       	ldd	r24, Y+15	; 0x0f
    163a:	98 89       	ldd	r25, Y+16	; 0x10
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <lcd_wr_char+0x144>
    1640:	98 8b       	std	Y+16, r25	; 0x10
    1642:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1644:	a8 e2       	ldi	r26, 0x28	; 40
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e2       	ldi	r30, 0x28	; 40
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8b 7f       	andi	r24, 0xFB	; 251
    1650:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1652:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1654:	8f 70       	andi	r24, 0x0F	; 15
    1656:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1658:	8e 8d       	ldd	r24, Y+30	; 0x1e
    165a:	82 95       	swap	r24
    165c:	80 7f       	andi	r24, 0xF0	; 240
    165e:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1660:	a8 e2       	ldi	r26, 0x28	; 40
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e8 e2       	ldi	r30, 0x28	; 40
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 70       	andi	r24, 0x0F	; 15
    166c:	8c 93       	st	X, r24
	lcd_port |= letter;
    166e:	a8 e2       	ldi	r26, 0x28	; 40
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e8 e2       	ldi	r30, 0x28	; 40
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	90 81       	ld	r25, Z
    1678:	8e 8d       	ldd	r24, Y+30	; 0x1e
    167a:	89 2b       	or	r24, r25
    167c:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    167e:	a8 e2       	ldi	r26, 0x28	; 40
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e8 e2       	ldi	r30, 0x28	; 40
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    168c:	a8 e2       	ldi	r26, 0x28	; 40
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e8 e2       	ldi	r30, 0x28	; 40
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8d 7f       	andi	r24, 0xFD	; 253
    1698:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    169a:	a8 e2       	ldi	r26, 0x28	; 40
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e2       	ldi	r30, 0x28	; 40
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	84 60       	ori	r24, 0x04	; 4
    16a6:	8c 93       	st	X, r24
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 ea       	ldi	r26, 0xA0	; 160
    16ae:	b0 e4       	ldi	r27, 0x40	; 64
    16b0:	8b 87       	std	Y+11, r24	; 0x0b
    16b2:	9c 87       	std	Y+12, r25	; 0x0c
    16b4:	ad 87       	std	Y+13, r26	; 0x0d
    16b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	26 e6       	ldi	r18, 0x66	; 102
    16c2:	36 e6       	ldi	r19, 0x66	; 102
    16c4:	46 e6       	ldi	r20, 0x66	; 102
    16c6:	55 e4       	ldi	r21, 0x45	; 69
    16c8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8f 83       	std	Y+7, r24	; 0x07
    16d2:	98 87       	std	Y+8, r25	; 0x08
    16d4:	a9 87       	std	Y+9, r26	; 0x09
    16d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <lcd_wr_char+0x202>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6b 85       	ldd	r22, Y+11	; 0x0b
    1714:	7c 85       	ldd	r23, Y+12	; 0x0c
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	9e 85       	ldd	r25, Y+14	; 0x0e
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	0f c0       	rjmp	.+30     	; 0x175a <lcd_wr_char+0x262>
    173c:	80 e7       	ldi	r24, 0x70	; 112
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	8b 83       	std	Y+3, r24	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <lcd_wr_char+0x250>
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <lcd_wr_char+0x244>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <lcd_wr_char+0x28c>
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    178c:	a8 e2       	ldi	r26, 0x28	; 40
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e8 e2       	ldi	r30, 0x28	; 40
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8b 7f       	andi	r24, 0xFB	; 251
    1798:	8c 93       	st	X, r24
}
    179a:	6e 96       	adiw	r28, 0x1e	; 30
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    17b4:	80 e8       	ldi	r24, 0x80	; 128
    17b6:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	0f 92       	push	r0
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	0a c0       	rjmp	.+20     	; 0x17e6 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    17d2:	e9 81       	ldd	r30, Y+1	; 0x01
    17d4:	fa 81       	ldd	r31, Y+2	; 0x02
    17d6:	80 81       	ld	r24, Z
    17d8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
		str++;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	80 81       	ld	r24, Z
    17ec:	88 23       	and	r24, r24
    17ee:	89 f7       	brne	.-30     	; 0x17d2 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <lcd_cursor+0x6>
    1800:	0f 92       	push	r0
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3c 83       	std	Y+4, r19	; 0x04
    1812:	2b 83       	std	Y+3, r18	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	91 05       	cpc	r25, r1
    181c:	d9 f0       	breq	.+54     	; 0x1854 <lcd_cursor+0x5a>
    181e:	2b 81       	ldd	r18, Y+3	; 0x03
    1820:	3c 81       	ldd	r19, Y+4	; 0x04
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <lcd_cursor+0x3a>
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	61 f0       	breq	.+24     	; 0x184a <lcd_cursor+0x50>
    1832:	1e c0       	rjmp	.+60     	; 0x1870 <lcd_cursor+0x76>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	31 05       	cpc	r19, r1
    183c:	81 f0       	breq	.+32     	; 0x185e <lcd_cursor+0x64>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	91 05       	cpc	r25, r1
    1846:	81 f0       	breq	.+32     	; 0x1868 <lcd_cursor+0x6e>
    1848:	13 c0       	rjmp	.+38     	; 0x1870 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	81 58       	subi	r24, 0x81	; 129
    184e:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	81 54       	subi	r24, 0x41	; 65
    1858:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	8d 56       	subi	r24, 0x6D	; 109
    1862:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	8d 52       	subi	r24, 0x2D	; 45
    186c:	0e 94 22 09 	call	0x1244	; 0x1244 <lcd_wr_command>
		default: break;
	}
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	27 97       	sbiw	r28, 0x07	; 7
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	6b 83       	std	Y+3, r22	; 0x03
    1896:	5d 83       	std	Y+5, r21	; 0x05
    1898:	4c 83       	std	Y+4, r20	; 0x04
    189a:	3f 83       	std	Y+7, r19	; 0x07
    189c:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    189e:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 23       	and	r24, r24
    18a4:	19 f0       	breq	.+6      	; 0x18ac <lcd_print+0x2e>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	88 23       	and	r24, r24
    18aa:	19 f4       	brne	.+6      	; 0x18b2 <lcd_print+0x34>
	{
		lcd_home();
    18ac:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <lcd_home>
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	6b 81       	ldd	r22, Y+3	; 0x03
    18b6:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cursor>
	}
	if(digits==5 || flag==1)
    18ba:	8e 81       	ldd	r24, Y+6	; 0x06
    18bc:	9f 81       	ldd	r25, Y+7	; 0x07
    18be:	85 30       	cpi	r24, 0x05	; 5
    18c0:	91 05       	cpc	r25, r1
    18c2:	19 f0       	breq	.+6      	; 0x18ca <lcd_print+0x4c>
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a9 f4       	brne	.+42     	; 0x18f4 <lcd_print+0x76>
	{
		million=value/10000+48;
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	20 e1       	ldi	r18, 0x10	; 16
    18d0:	37 e2       	ldi	r19, 0x27	; 39
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    18d8:	cb 01       	movw	r24, r22
    18da:	c0 96       	adiw	r24, 0x30	; 48
    18dc:	90 93 0d 07 	sts	0x070D, r25
    18e0:	80 93 0c 07 	sts	0x070C, r24
		lcd_wr_char(million);
    18e4:	80 91 0c 07 	lds	r24, 0x070C
    18e8:	90 91 0d 07 	lds	r25, 0x070D
    18ec:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
		flag=1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    18f6:	9f 81       	ldd	r25, Y+7	; 0x07
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	91 05       	cpc	r25, r1
    18fc:	19 f0       	breq	.+6      	; 0x1904 <lcd_print+0x86>
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	11 f5       	brne	.+68     	; 0x1948 <lcd_print+0xca>
	{
		temp = value/1000;
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	28 ee       	ldi	r18, 0xE8	; 232
    190a:	33 e0       	ldi	r19, 0x03	; 3
    190c:	b9 01       	movw	r22, r18
    190e:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    1912:	cb 01       	movw	r24, r22
    1914:	90 93 0f 07 	sts	0x070F, r25
    1918:	80 93 0e 07 	sts	0x070E, r24
		thousand = temp%10 + 48;
    191c:	80 91 0e 07 	lds	r24, 0x070E
    1920:	90 91 0f 07 	lds	r25, 0x070F
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	b9 01       	movw	r22, r18
    192a:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    192e:	c0 96       	adiw	r24, 0x30	; 48
    1930:	90 93 eb 0e 	sts	0x0EEB, r25
    1934:	80 93 ea 0e 	sts	0x0EEA, r24
		lcd_wr_char(thousand);
    1938:	80 91 ea 0e 	lds	r24, 0x0EEA
    193c:	90 91 eb 0e 	lds	r25, 0x0EEB
    1940:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
		flag=1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1948:	8e 81       	ldd	r24, Y+6	; 0x06
    194a:	9f 81       	ldd	r25, Y+7	; 0x07
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	19 f0       	breq	.+6      	; 0x1958 <lcd_print+0xda>
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	11 f5       	brne	.+68     	; 0x199c <lcd_print+0x11e>
	{
		temp = value/100;
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	24 e6       	ldi	r18, 0x64	; 100
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	b9 01       	movw	r22, r18
    1962:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    1966:	cb 01       	movw	r24, r22
    1968:	90 93 0f 07 	sts	0x070F, r25
    196c:	80 93 0e 07 	sts	0x070E, r24
		hundred = temp%10 + 48;
    1970:	80 91 0e 07 	lds	r24, 0x070E
    1974:	90 91 0f 07 	lds	r25, 0x070F
    1978:	2a e0       	ldi	r18, 0x0A	; 10
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	b9 01       	movw	r22, r18
    197e:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    1982:	c0 96       	adiw	r24, 0x30	; 48
    1984:	90 93 e3 0e 	sts	0x0EE3, r25
    1988:	80 93 e2 0e 	sts	0x0EE2, r24
		lcd_wr_char(hundred);
    198c:	80 91 e2 0e 	lds	r24, 0x0EE2
    1990:	90 91 e3 0e 	lds	r25, 0x0EE3
    1994:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
		flag=1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	9f 81       	ldd	r25, Y+7	; 0x07
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	91 05       	cpc	r25, r1
    19a4:	19 f0       	breq	.+6      	; 0x19ac <lcd_print+0x12e>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	11 f5       	brne	.+68     	; 0x19f0 <lcd_print+0x172>
	{
		temp = value/10;
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	2a e0       	ldi	r18, 0x0A	; 10
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	b9 01       	movw	r22, r18
    19b6:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    19ba:	cb 01       	movw	r24, r22
    19bc:	90 93 0f 07 	sts	0x070F, r25
    19c0:	80 93 0e 07 	sts	0x070E, r24
		tens = temp%10 + 48;
    19c4:	80 91 0e 07 	lds	r24, 0x070E
    19c8:	90 91 0f 07 	lds	r25, 0x070F
    19cc:	2a e0       	ldi	r18, 0x0A	; 10
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	b9 01       	movw	r22, r18
    19d2:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    19d6:	c0 96       	adiw	r24, 0x30	; 48
    19d8:	90 93 e1 0e 	sts	0x0EE1, r25
    19dc:	80 93 e0 0e 	sts	0x0EE0, r24
		lcd_wr_char(tens);
    19e0:	80 91 e0 0e 	lds	r24, 0x0EE0
    19e4:	90 91 e1 0e 	lds	r25, 0x0EE1
    19e8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
		flag=1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	9f 81       	ldd	r25, Y+7	; 0x07
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	91 05       	cpc	r25, r1
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <lcd_print+0x182>
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 f4       	brne	.+36     	; 0x1a24 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	2a e0       	ldi	r18, 0x0A	; 10
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	b9 01       	movw	r22, r18
    1a0a:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    1a0e:	c0 96       	adiw	r24, 0x30	; 48
    1a10:	90 93 e9 0e 	sts	0x0EE9, r25
    1a14:	80 93 e8 0e 	sts	0x0EE8, r24
		lcd_wr_char(unit);
    1a18:	80 91 e8 0e 	lds	r24, 0x0EE8
    1a1c:	90 91 e9 0e 	lds	r25, 0x0EE9
    1a20:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
	}
	if(digits>5)
    1a24:	8e 81       	ldd	r24, Y+6	; 0x06
    1a26:	9f 81       	ldd	r25, Y+7	; 0x07
    1a28:	86 30       	cpi	r24, 0x06	; 6
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	1c f0       	brlt	.+6      	; 0x1a34 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1a2e:	85 e4       	ldi	r24, 0x45	; 69
    1a30:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
	}
	
}
    1a34:	27 96       	adiw	r28, 0x07	; 7
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <lcd_num>:
//! display a number on LCD
    /*!
     Function used for displaying a number on LCD
    */
void lcd_num(int x)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2d 97       	sbiw	r28, 0x0d	; 13
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	9d 87       	std	Y+13, r25	; 0x0d
    1a5c:	8c 87       	std	Y+12, r24	; 0x0c

    lcd_cursor(1,5);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	65 e0       	ldi	r22, 0x05	; 5
    1a62:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cursor>

char cVal[10];
itoa(x,cVal,10);
    1a66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	2e 5f       	subi	r18, 0xFE	; 254
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	b9 01       	movw	r22, r18
    1a72:	4a e0       	ldi	r20, 0x0A	; 10
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	0e 94 55 1a 	call	0x34aa	; 0x34aa <itoa>
lcd_string(cVal);
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	02 96       	adiw	r24, 0x02	; 2
    1a7e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
char a=' ';
    1a82:	80 e2       	ldi	r24, 0x20	; 32
    1a84:	89 83       	std	Y+1, r24	; 0x01
lcd_wr_char(a);
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <lcd_wr_char>
    1a8c:	2d 96       	adiw	r28, 0x0d	; 13
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <servo2_pin_config>:
#include <util/delay.h>
#include "globalVar.h"

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	DDRB = DDRB | 0x40; //making PORTB 6 pin output
    1aa6:	a4 e2       	ldi	r26, 0x24	; 36
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e4 e2       	ldi	r30, 0x24	; 36
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 64       	ori	r24, 0x40	; 64
    1ab2:	8c 93       	st	X, r24
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1ab4:	a5 e2       	ldi	r26, 0x25	; 37
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e2       	ldi	r30, 0x25	; 37
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 64       	ori	r24, 0x40	; 64
    1ac0:	8c 93       	st	X, r24
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz
void timer1_init(void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00; //stop
    1ad0:	e1 e8       	ldi	r30, 0x81	; 129
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	10 82       	st	Z, r1
	TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1ad6:	e5 e8       	ldi	r30, 0x85	; 133
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8c ef       	ldi	r24, 0xFC	; 252
    1adc:	80 83       	st	Z, r24
	TCNT1L = 0x01; //Counter low value to which OCR1xH value is to be compared with
    1ade:	e4 e8       	ldi	r30, 0x84	; 132
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	80 83       	st	Z, r24
	OCR1BH = 0x03; //Output compare Register high value for servo 2
    1ae6:	eb e8       	ldi	r30, 0x8B	; 139
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Output Compare Register low Value For servo 2
    1aee:	ea e8       	ldi	r30, 0x8A	; 138
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	80 83       	st	Z, r24
	ICR1H = 0x03;
    1af6:	e7 e8       	ldi	r30, 0x87	; 135
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	80 83       	st	Z, r24
	ICR1L = 0xFF;
    1afe:	e6 e8       	ldi	r30, 0x86	; 134
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	80 83       	st	Z, r24
	TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1b06:	e0 e8       	ldi	r30, 0x80	; 128
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8b ea       	ldi	r24, 0xAB	; 171
    1b0c:	80 83       	st	Z, r24
	For Overriding normal port functionality to OCRnA outputs.
	{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	TCCR1C = 0x00;
    1b0e:	e2 e8       	ldi	r30, 0x82	; 130
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	10 82       	st	Z, r1
	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1b14:	e1 e8       	ldi	r30, 0x81	; 129
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8c e0       	ldi	r24, 0x0C	; 12
    1b1a:	80 83       	st	Z, r24
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <servo_2>:

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(float degrees)
{
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	28 97       	sbiw	r28, 0x08	; 8
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	6d 83       	std	Y+5, r22	; 0x05
    1b3c:	7e 83       	std	Y+6, r23	; 0x06
    1b3e:	8f 83       	std	Y+7, r24	; 0x07
    1b40:	98 87       	std	Y+8, r25	; 0x08
	float PositionTiltServo = 0;
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	ab 83       	std	Y+3, r26	; 0x03
    1b50:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1b52:	6d 81       	ldd	r22, Y+5	; 0x05
    1b54:	7e 81       	ldd	r23, Y+6	; 0x06
    1b56:	8f 81       	ldd	r24, Y+7	; 0x07
    1b58:	98 85       	ldd	r25, Y+8	; 0x08
    1b5a:	2b e7       	ldi	r18, 0x7B	; 123
    1b5c:	34 e1       	ldi	r19, 0x14	; 20
    1b5e:	4e ee       	ldi	r20, 0xEE	; 238
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__divsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4c e0       	ldi	r20, 0x0C	; 12
    1b74:	52 e4       	ldi	r21, 0x42	; 66
    1b76:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__addsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	ab 83       	std	Y+3, r26	; 0x03
    1b84:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    1b86:	eb e8       	ldi	r30, 0x8B	; 139
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1b8c:	0a e8       	ldi	r16, 0x8A	; 138
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
    1b90:	69 81       	ldd	r22, Y+1	; 0x01
    1b92:	7a 81       	ldd	r23, Y+2	; 0x02
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	80 83       	st	Z, r24
}
    1ba4:	28 96       	adiw	r28, 0x08	; 8
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <servo_2_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.


void servo_2_free (void) //makes servo 2 free rotating
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	OCR1BH = 0x03;
    1bc2:	eb e8       	ldi	r30, 0x8B	; 139
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Servo 2 off
    1bca:	ea e8       	ldi	r30, 0x8A	; 138
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	80 83       	st	Z, r24
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <pen_up>:

void pen_up(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	60 97       	sbiw	r28, 0x10	; 16
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
	int degree = 72;
    1bec:	88 e4       	ldi	r24, 0x48	; 72
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	98 8b       	std	Y+16, r25	; 0x10
    1bf2:	8f 87       	std	Y+15, r24	; 0x0f
	servo_2(degree);
    1bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf6:	98 89       	ldd	r25, Y+16	; 0x10
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	97 fd       	sbrc	r25, 7
    1bfc:	a0 95       	com	r26
    1bfe:	ba 2f       	mov	r27, r26
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatsisf>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <servo_2>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	aa ef       	ldi	r26, 0xFA	; 250
    1c1a:	b4 e4       	ldi	r27, 0x44	; 68
    1c1c:	8b 87       	std	Y+11, r24	; 0x0b
    1c1e:	9c 87       	std	Y+12, r25	; 0x0c
    1c20:	ad 87       	std	Y+13, r26	; 0x0d
    1c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	26 e6       	ldi	r18, 0x66	; 102
    1c2e:	36 e6       	ldi	r19, 0x66	; 102
    1c30:	46 e6       	ldi	r20, 0x66	; 102
    1c32:	55 e4       	ldi	r21, 0x45	; 69
    1c34:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f 83       	std	Y+7, r24	; 0x07
    1c3e:	98 87       	std	Y+8, r25	; 0x08
    1c40:	a9 87       	std	Y+9, r26	; 0x09
    1c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <pen_up+0x8e>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <pen_up+0x10c>
	else if (__tmp > 65535)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <pen_up+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <pen_up+0xee>
    1ca8:	80 e7       	ldi	r24, 0x70	; 112
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <pen_up+0xdc>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <pen_up+0xd0>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <pen_up+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <pen_up+0x118>
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_2_free();
    1cf8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <servo_2_free>
}
    1cfc:	60 96       	adiw	r28, 0x10	; 16
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <pen_down>:

void pen_down(void)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	60 97       	sbiw	r28, 0x10	; 16
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
	int degree = 99;
    1d22:	83 e6       	ldi	r24, 0x63	; 99
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	98 8b       	std	Y+16, r25	; 0x10
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
	servo_2(degree);
    1d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2c:	98 89       	ldd	r25, Y+16	; 0x10
    1d2e:	aa 27       	eor	r26, r26
    1d30:	97 fd       	sbrc	r25, 7
    1d32:	a0 95       	com	r26
    1d34:	ba 2f       	mov	r27, r26
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__floatsisf>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <servo_2>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	aa ef       	ldi	r26, 0xFA	; 250
    1d50:	b4 e4       	ldi	r27, 0x44	; 68
    1d52:	8b 87       	std	Y+11, r24	; 0x0b
    1d54:	9c 87       	std	Y+12, r25	; 0x0c
    1d56:	ad 87       	std	Y+13, r26	; 0x0d
    1d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d62:	26 e6       	ldi	r18, 0x66	; 102
    1d64:	36 e6       	ldi	r19, 0x66	; 102
    1d66:	46 e6       	ldi	r20, 0x66	; 102
    1d68:	55 e4       	ldi	r21, 0x45	; 69
    1d6a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8f 83       	std	Y+7, r24	; 0x07
    1d74:	98 87       	std	Y+8, r25	; 0x08
    1d76:	a9 87       	std	Y+9, r26	; 0x09
    1d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <pen_down+0x8e>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <pen_down+0x10c>
	else if (__tmp > 65535)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <pen_down+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <pen_down+0xee>
    1dde:	80 e7       	ldi	r24, 0x70	; 112
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <pen_down+0xdc>
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <pen_down+0xd0>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <pen_down+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <pen_down+0x118>
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_2_free();
    1e2e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <servo_2_free>
    1e32:	60 96       	adiw	r28, 0x10	; 16
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <uart3_init>:
#include<avr/interrupt.h>
#include<util/delay.h>
#include "globalVar.h"

void uart3_init(void)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
 UCSR3B = 0x00; //disable while setting baud rate
    1e4c:	e1 e3       	ldi	r30, 0x31	; 49
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	10 82       	st	Z, r1
 UCSR3A = 0x00;
    1e52:	e0 e3       	ldi	r30, 0x30	; 48
    1e54:	f1 e0       	ldi	r31, 0x01	; 1
    1e56:	10 82       	st	Z, r1
 UCSR3C = 0x06;
    1e58:	e2 e3       	ldi	r30, 0x32	; 50
    1e5a:	f1 e0       	ldi	r31, 0x01	; 1
    1e5c:	86 e0       	ldi	r24, 0x06	; 6
    1e5e:	80 83       	st	Z, r24
 UBRR3L = 0x5F;
    1e60:	e4 e3       	ldi	r30, 0x34	; 52
    1e62:	f1 e0       	ldi	r31, 0x01	; 1
    1e64:	8f e5       	ldi	r24, 0x5F	; 95
    1e66:	80 83       	st	Z, r24
 UBRR3H = 0x00; //set baud rate hi
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f1 e0       	ldi	r31, 0x01	; 1
    1e6c:	10 82       	st	Z, r1
 UCSR3B = 0x98;
    1e6e:	e1 e3       	ldi	r30, 0x31	; 49
    1e70:	f1 e0       	ldi	r31, 0x01	; 1
    1e72:	88 e9       	ldi	r24, 0x98	; 152
    1e74:	80 83       	st	Z, r24
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <__vector_54>:

SIGNAL(SIG_USART3_RECV) 		// ISR for receive complete interrupt
{
    1e7c:	1f 92       	push	r1
    1e7e:	0f 92       	push	r0
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	0f 92       	push	r0
    1e84:	00 90 5b 00 	lds	r0, 0x005B
    1e88:	0f 92       	push	r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	2f 93       	push	r18
    1e8e:	3f 93       	push	r19
    1e90:	4f 93       	push	r20
    1e92:	5f 93       	push	r21
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	ef 93       	push	r30
    1e9a:	ff 93       	push	r31
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <__vector_54+0x26>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data1 = UDR3;
    1ea6:	e6 e3       	ldi	r30, 0x36	; 54
    1ea8:	f1 e0       	ldi	r31, 0x01	; 1
    1eaa:	80 81       	ld	r24, Z
    1eac:	8b 83       	std	Y+3, r24	; 0x03
	int i = data1 - '0';
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	c0 97       	sbiw	r24, 0x30	; 48
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01

	if(data1 == 0x24){
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	84 32       	cpi	r24, 0x24	; 36
    1ebe:	51 f4       	brne	.+20     	; 0x1ed4 <__vector_54+0x58>
		data_pos++;
    1ec0:	80 91 e6 0e 	lds	r24, 0x0EE6
    1ec4:	90 91 e7 0e 	lds	r25, 0x0EE7
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	90 93 e7 0e 	sts	0x0EE7, r25
    1ece:	80 93 e6 0e 	sts	0x0EE6, r24
    1ed2:	89 c0       	rjmp	.+274    	; 0x1fe6 <__vector_54+0x16a>
	}

	else if (data1 == 0x46){
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	86 34       	cpi	r24, 0x46	; 70
    1ed8:	81 f4       	brne	.+32     	; 0x1efa <__vector_54+0x7e>
		mov_array[data_pos] = 'F';
    1eda:	80 91 e6 0e 	lds	r24, 0x0EE6
    1ede:	90 91 e7 0e 	lds	r25, 0x0EE7
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	ec 5d       	subi	r30, 0xDC	; 220
    1ee6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ee8:	86 e4       	ldi	r24, 0x46	; 70
    1eea:	80 83       	st	Z, r24
		flag  = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	90 93 1f 03 	sts	0x031F, r25
    1ef4:	80 93 1e 03 	sts	0x031E, r24
    1ef8:	76 c0       	rjmp	.+236    	; 0x1fe6 <__vector_54+0x16a>
	}

	else if (data1 == 0x42){
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	82 34       	cpi	r24, 0x42	; 66
    1efe:	51 f4       	brne	.+20     	; 0x1f14 <__vector_54+0x98>
		mov_array[data_pos] = 'B';
    1f00:	80 91 e6 0e 	lds	r24, 0x0EE6
    1f04:	90 91 e7 0e 	lds	r25, 0x0EE7
    1f08:	fc 01       	movw	r30, r24
    1f0a:	ec 5d       	subi	r30, 0xDC	; 220
    1f0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0e:	82 e4       	ldi	r24, 0x42	; 66
    1f10:	80 83       	st	Z, r24
    1f12:	69 c0       	rjmp	.+210    	; 0x1fe6 <__vector_54+0x16a>
		//flag  = 1;
	}

	else if (data1 == 0x52){
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	82 35       	cpi	r24, 0x52	; 82
    1f18:	51 f4       	brne	.+20     	; 0x1f2e <__vector_54+0xb2>
		mov_array[data_pos] = 'R';
    1f1a:	80 91 e6 0e 	lds	r24, 0x0EE6
    1f1e:	90 91 e7 0e 	lds	r25, 0x0EE7
    1f22:	fc 01       	movw	r30, r24
    1f24:	ec 5d       	subi	r30, 0xDC	; 220
    1f26:	fc 4f       	sbci	r31, 0xFC	; 252
    1f28:	82 e5       	ldi	r24, 0x52	; 82
    1f2a:	80 83       	st	Z, r24
    1f2c:	5c c0       	rjmp	.+184    	; 0x1fe6 <__vector_54+0x16a>
		//flag  = 1;
	}

	else if (data1 == 0x4C){
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	8c 34       	cpi	r24, 0x4C	; 76
    1f32:	51 f4       	brne	.+20     	; 0x1f48 <__vector_54+0xcc>
		mov_array[data_pos] = 'L';
    1f34:	80 91 e6 0e 	lds	r24, 0x0EE6
    1f38:	90 91 e7 0e 	lds	r25, 0x0EE7
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	ec 5d       	subi	r30, 0xDC	; 220
    1f40:	fc 4f       	sbci	r31, 0xFC	; 252
    1f42:	8c e4       	ldi	r24, 0x4C	; 76
    1f44:	80 83       	st	Z, r24
    1f46:	4f c0       	rjmp	.+158    	; 0x1fe6 <__vector_54+0x16a>
		//flag  = 1;
	}
	
	else if (data1 == 0x44){
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	84 34       	cpi	r24, 0x44	; 68
    1f4c:	51 f4       	brne	.+20     	; 0x1f62 <__vector_54+0xe6>
		mov_array[data_pos] = 'D';
    1f4e:	80 91 e6 0e 	lds	r24, 0x0EE6
    1f52:	90 91 e7 0e 	lds	r25, 0x0EE7
    1f56:	fc 01       	movw	r30, r24
    1f58:	ec 5d       	subi	r30, 0xDC	; 220
    1f5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f5c:	84 e4       	ldi	r24, 0x44	; 68
    1f5e:	80 83       	st	Z, r24
    1f60:	42 c0       	rjmp	.+132    	; 0x1fe6 <__vector_54+0x16a>
		//flag  = 1;
	}
	
	else if (data1 == 0x55){
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	85 35       	cpi	r24, 0x55	; 85
    1f66:	51 f4       	brne	.+20     	; 0x1f7c <__vector_54+0x100>
		mov_array[data_pos] = 'U';
    1f68:	80 91 e6 0e 	lds	r24, 0x0EE6
    1f6c:	90 91 e7 0e 	lds	r25, 0x0EE7
    1f70:	fc 01       	movw	r30, r24
    1f72:	ec 5d       	subi	r30, 0xDC	; 220
    1f74:	fc 4f       	sbci	r31, 0xFC	; 252
    1f76:	85 e5       	ldi	r24, 0x55	; 85
    1f78:	80 83       	st	Z, r24
    1f7a:	35 c0       	rjmp	.+106    	; 0x1fe6 <__vector_54+0x16a>
		//flag  = 1;
	}

	else if ( i <= 10 &&  i > -1 && flag == 1){
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	8b 30       	cpi	r24, 0x0B	; 11
    1f82:	91 05       	cpc	r25, r1
    1f84:	84 f5       	brge	.+96     	; 0x1fe6 <__vector_54+0x16a>
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	99 23       	and	r25, r25
    1f8c:	64 f1       	brlt	.+88     	; 0x1fe6 <__vector_54+0x16a>
    1f8e:	80 91 1e 03 	lds	r24, 0x031E
    1f92:	90 91 1f 03 	lds	r25, 0x031F
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 05       	cpc	r25, r1
    1f9a:	29 f5       	brne	.+74     	; 0x1fe6 <__vector_54+0x16a>
		val_array[data_pos] = val_array[data_pos]*10 + i;
    1f9c:	40 91 e6 0e 	lds	r20, 0x0EE6
    1fa0:	50 91 e7 0e 	lds	r21, 0x0EE7
    1fa4:	80 91 e6 0e 	lds	r24, 0x0EE6
    1fa8:	90 91 e7 0e 	lds	r25, 0x0EE7
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	e0 5f       	subi	r30, 0xF0	; 240
    1fb4:	f8 4f       	sbci	r31, 0xF8	; 248
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	9c 01       	movw	r18, r24
    1fbc:	22 0f       	add	r18, r18
    1fbe:	33 1f       	adc	r19, r19
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	28 0f       	add	r18, r24
    1fcc:	39 1f       	adc	r19, r25
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	28 0f       	add	r18, r24
    1fd4:	39 1f       	adc	r19, r25
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e0 5f       	subi	r30, 0xF0	; 240
    1fe0:	f8 4f       	sbci	r31, 0xF8	; 248
    1fe2:	31 83       	std	Z+1, r19	; 0x01
    1fe4:	20 83       	st	Z, r18
	}
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	ff 91       	pop	r31
    1ff2:	ef 91       	pop	r30
    1ff4:	9f 91       	pop	r25
    1ff6:	8f 91       	pop	r24
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	00 92 5b 00 	sts	0x005B, r0
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <init_devices>:
#include "globalVar.h"
#include "bluetooth.c"

//Initialize the devices and thier ports

void init_devices(void){
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	cli(); //disable all interrupts
    2018:	f8 94       	cli
	timer1_init();
    201a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <timer1_init>
	lcd_init();
    201e:	0e 94 8a 08 	call	0x1114	; 0x1114 <lcd_init>
	uart3_init();
    2022:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <uart3_init>
	servo2_pin_config(); 
    2026:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <servo2_pin_config>
	motion_port_init();
    202a:	0e 94 0c 01 	call	0x218	; 0x218 <motion_port_init>
	sei(); //re-enable interrupts
    202e:	78 94       	sei
}
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <turn_right>:

void turn_right(int degree){
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	60 97       	sbiw	r28, 0x10	; 16
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	98 8b       	std	Y+16, r25	; 0x10
    204c:	8f 87       	std	Y+15, r24	; 0x0f
	pen_up();
    204e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <pen_up>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a8 ec       	ldi	r26, 0xC8	; 200
    2058:	b2 e4       	ldi	r27, 0x42	; 66
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	26 e6       	ldi	r18, 0x66	; 102
    206c:	36 e6       	ldi	r19, 0x66	; 102
    206e:	46 e6       	ldi	r20, 0x66	; 102
    2070:	55 e4       	ldi	r21, 0x45	; 69
    2072:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <turn_right+0x6e>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <turn_right+0xec>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <turn_right+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <turn_right+0xce>
    20e6:	80 e7       	ldi	r24, 0x70	; 112
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <turn_right+0xbc>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <turn_right+0xb0>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <turn_right+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <turn_right+0xf8>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	move_straight(245,1);
    2136:	85 ef       	ldi	r24, 0xF5	; 245
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	0e 94 55 03 	call	0x6aa	; 0x6aa <move_straight>
	right_degrees(degree);
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	98 89       	ldd	r25, Y+16	; 0x10
    2146:	0e 94 de 02 	call	0x5bc	; 0x5bc <right_degrees>
	move_straight(255,0);
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	0e 94 55 03 	call	0x6aa	; 0x6aa <move_straight>
	
	pen_down();
    2156:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <pen_down>
}
    215a:	60 96       	adiw	r28, 0x10	; 16
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <turn_left>:

void turn_left(int degree){
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	6e 97       	sbiw	r28, 0x1e	; 30
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	9e 8f       	std	Y+30, r25	; 0x1e
    2182:	8d 8f       	std	Y+29, r24	; 0x1d
	pen_up();
    2184:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <pen_up>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a8 ec       	ldi	r26, 0xC8	; 200
    218e:	b2 e4       	ldi	r27, 0x42	; 66
    2190:	89 8f       	std	Y+25, r24	; 0x19
    2192:	9a 8f       	std	Y+26, r25	; 0x1a
    2194:	ab 8f       	std	Y+27, r26	; 0x1b
    2196:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	26 e6       	ldi	r18, 0x66	; 102
    21a2:	36 e6       	ldi	r19, 0x66	; 102
    21a4:	46 e6       	ldi	r20, 0x66	; 102
    21a6:	55 e4       	ldi	r21, 0x45	; 69
    21a8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8d 8b       	std	Y+21, r24	; 0x15
    21b2:	9e 8b       	std	Y+22, r25	; 0x16
    21b4:	af 8b       	std	Y+23, r26	; 0x17
    21b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ba:	7e 89       	ldd	r23, Y+22	; 0x16
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	98 8d       	ldd	r25, Y+24	; 0x18
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <turn_left+0x6e>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <__stack+0x59>
	else if (__tmp > 65535)
    21da:	6d 89       	ldd	r22, Y+21	; 0x15
    21dc:	7e 89       	ldd	r23, Y+22	; 0x16
    21de:	8f 89       	ldd	r24, Y+23	; 0x17
    21e0:	98 8d       	ldd	r25, Y+24	; 0x18
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <__stack+0x45>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	69 8d       	ldd	r22, Y+25	; 0x19
    21f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	0f c0       	rjmp	.+30     	; 0x223a <__stack+0x3b>
    221c:	80 e7       	ldi	r24, 0x70	; 112
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	9a 8b       	std	Y+18, r25	; 0x12
    2222:	89 8b       	std	Y+17, r24	; 0x11
    2224:	89 89       	ldd	r24, Y+17	; 0x11
    2226:	9a 89       	ldd	r25, Y+18	; 0x12
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <__stack+0x29>
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	8b 89       	ldd	r24, Y+19	; 0x13
    2232:	9c 89       	ldd	r25, Y+20	; 0x14
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9c 8b       	std	Y+20, r25	; 0x14
    2238:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	8b 89       	ldd	r24, Y+19	; 0x13
    223c:	9c 89       	ldd	r25, Y+20	; 0x14
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <__stack+0x1d>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <__stack+0x6d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6d 89       	ldd	r22, Y+21	; 0x15
    2246:	7e 89       	ldd	r23, Y+22	; 0x16
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	98 89       	ldd	r25, Y+16	; 0x10
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <__stack+0x65>
    2268:	98 8b       	std	Y+16, r25	; 0x10
    226a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	move_straight(245,1);
    226c:	85 ef       	ldi	r24, 0xF5	; 245
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	0e 94 55 03 	call	0x6aa	; 0x6aa <move_straight>
	left_degrees(degree);
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    227c:	0e 94 cb 02 	call	0x596	; 0x596 <left_degrees>
	move_straight(245,0);
    2280:	85 ef       	ldi	r24, 0xF5	; 245
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	0e 94 55 03 	call	0x6aa	; 0x6aa <move_straight>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a8 ec       	ldi	r26, 0xC8	; 200
    2292:	b2 e4       	ldi	r27, 0x42	; 66
    2294:	8b 87       	std	Y+11, r24	; 0x0b
    2296:	9c 87       	std	Y+12, r25	; 0x0c
    2298:	ad 87       	std	Y+13, r26	; 0x0d
    229a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a4:	26 e6       	ldi	r18, 0x66	; 102
    22a6:	36 e6       	ldi	r19, 0x66	; 102
    22a8:	46 e6       	ldi	r20, 0x66	; 102
    22aa:	55 e4       	ldi	r21, 0x45	; 69
    22ac:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <__stack+0xdf>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <__stack+0x15d>
	else if (__tmp > 65535)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <__stack+0x149>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	0f c0       	rjmp	.+30     	; 0x233e <__stack+0x13f>
    2320:	80 e7       	ldi	r24, 0x70	; 112
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <__stack+0x12d>
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <__stack+0x121>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <__stack+0x171>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <__stack+0x169>
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	pen_down();
    2370:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <pen_down>
}
    2374:	6e 96       	adiw	r28, 0x1e	; 30
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <main>:

//Main function
int main(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	60 97       	sbiw	r28, 0x10	; 16
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
	//Initialize value array with 0
	int i;
	for(i=0;i<1000;i++){
    239a:	18 8a       	std	Y+16, r1	; 0x10
    239c:	1f 86       	std	Y+15, r1	; 0x0f
    239e:	0e c0       	rjmp	.+28     	; 0x23bc <main+0x36>
		val_array[i] = 0;
    23a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a2:	98 89       	ldd	r25, Y+16	; 0x10
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	fc 01       	movw	r30, r24
    23aa:	e0 5f       	subi	r30, 0xF0	; 240
    23ac:	f8 4f       	sbci	r31, 0xF8	; 248
    23ae:	11 82       	std	Z+1, r1	; 0x01
    23b0:	10 82       	st	Z, r1
//Main function
int main(void)
{
	//Initialize value array with 0
	int i;
	for(i=0;i<1000;i++){
    23b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b4:	98 89       	ldd	r25, Y+16	; 0x10
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	98 8b       	std	Y+16, r25	; 0x10
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	98 89       	ldd	r25, Y+16	; 0x10
    23c0:	23 e0       	ldi	r18, 0x03	; 3
    23c2:	88 3e       	cpi	r24, 0xE8	; 232
    23c4:	92 07       	cpc	r25, r18
    23c6:	64 f3       	brlt	.-40     	; 0x23a0 <main+0x1a>
		val_array[i] = 0;
	}
	
	data_pos = 0;
    23c8:	10 92 e7 0e 	sts	0x0EE7, r1
    23cc:	10 92 e6 0e 	sts	0x0EE6, r1
	bot_pos = 0;
    23d0:	10 92 e5 0e 	sts	0x0EE5, r1
    23d4:	10 92 e4 0e 	sts	0x0EE4, r1
	
	init_devices();
    23d8:	0e 94 08 10 	call	0x2010	; 0x2010 <init_devices>

	//LCD_Reset_4bit();
	lcd_cursor(2,1);
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	61 e0       	ldi	r22, 0x01	; 1
    23e0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cursor>
	lcd_string("DRAWOID");
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	92 e0       	ldi	r25, 0x02	; 2
    23e8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
	
	while(1){
		if (bot_pos < data_pos){
    23ec:	20 91 e4 0e 	lds	r18, 0x0EE4
    23f0:	30 91 e5 0e 	lds	r19, 0x0EE5
    23f4:	80 91 e6 0e 	lds	r24, 0x0EE6
    23f8:	90 91 e7 0e 	lds	r25, 0x0EE7
    23fc:	28 17       	cp	r18, r24
    23fe:	39 07       	cpc	r19, r25
    2400:	ac f7       	brge	.-22     	; 0x23ec <main+0x66>
			lcd_print(1,9,val_array[bot_pos],3);
    2402:	80 91 e4 0e 	lds	r24, 0x0EE4
    2406:	90 91 e5 0e 	lds	r25, 0x0EE5
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	fc 01       	movw	r30, r24
    2410:	e0 5f       	subi	r30, 0xF0	; 240
    2412:	f8 4f       	sbci	r31, 0xF8	; 248
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	9c 01       	movw	r18, r24
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	69 e0       	ldi	r22, 0x09	; 9
    241e:	a9 01       	movw	r20, r18
    2420:	23 e0       	ldi	r18, 0x03	; 3
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	0e 94 3f 0c 	call	0x187e	; 0x187e <lcd_print>
			lcd_cursor(1,1);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	61 e0       	ldi	r22, 0x01	; 1
    242c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cursor>
			if (mov_array[bot_pos] == 'F'){
    2430:	80 91 e4 0e 	lds	r24, 0x0EE4
    2434:	90 91 e5 0e 	lds	r25, 0x0EE5
    2438:	fc 01       	movw	r30, r24
    243a:	ec 5d       	subi	r30, 0xDC	; 220
    243c:	fc 4f       	sbci	r31, 0xFC	; 252
    243e:	80 81       	ld	r24, Z
    2440:	86 34       	cpi	r24, 0x46	; 70
    2442:	a1 f4       	brne	.+40     	; 0x246c <main+0xe6>
				lcd_string("F");
    2444:	88 e0       	ldi	r24, 0x08	; 8
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
				move_straight(val_array[bot_pos],1);
    244c:	80 91 e4 0e 	lds	r24, 0x0EE4
    2450:	90 91 e5 0e 	lds	r25, 0x0EE5
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	fc 01       	movw	r30, r24
    245a:	e0 5f       	subi	r30, 0xF0	; 240
    245c:	f8 4f       	sbci	r31, 0xF8	; 248
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	0e 94 55 03 	call	0x6aa	; 0x6aa <move_straight>
    246a:	77 c0       	rjmp	.+238    	; 0x255a <main+0x1d4>
			}
			else if (mov_array[bot_pos] == 'B'){
    246c:	80 91 e4 0e 	lds	r24, 0x0EE4
    2470:	90 91 e5 0e 	lds	r25, 0x0EE5
    2474:	fc 01       	movw	r30, r24
    2476:	ec 5d       	subi	r30, 0xDC	; 220
    2478:	fc 4f       	sbci	r31, 0xFC	; 252
    247a:	80 81       	ld	r24, Z
    247c:	82 34       	cpi	r24, 0x42	; 66
    247e:	a1 f4       	brne	.+40     	; 0x24a8 <main+0x122>
				lcd_string("B");
    2480:	8a e0       	ldi	r24, 0x0A	; 10
    2482:	92 e0       	ldi	r25, 0x02	; 2
    2484:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
				move_straight(val_array[bot_pos],0);
    2488:	80 91 e4 0e 	lds	r24, 0x0EE4
    248c:	90 91 e5 0e 	lds	r25, 0x0EE5
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	fc 01       	movw	r30, r24
    2496:	e0 5f       	subi	r30, 0xF0	; 240
    2498:	f8 4f       	sbci	r31, 0xF8	; 248
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	0e 94 55 03 	call	0x6aa	; 0x6aa <move_straight>
    24a6:	59 c0       	rjmp	.+178    	; 0x255a <main+0x1d4>
			}
			else if (mov_array[bot_pos] == 'R'){
    24a8:	80 91 e4 0e 	lds	r24, 0x0EE4
    24ac:	90 91 e5 0e 	lds	r25, 0x0EE5
    24b0:	fc 01       	movw	r30, r24
    24b2:	ec 5d       	subi	r30, 0xDC	; 220
    24b4:	fc 4f       	sbci	r31, 0xFC	; 252
    24b6:	80 81       	ld	r24, Z
    24b8:	82 35       	cpi	r24, 0x52	; 82
    24ba:	91 f4       	brne	.+36     	; 0x24e0 <main+0x15a>
				lcd_string("R");
    24bc:	8c e0       	ldi	r24, 0x0C	; 12
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
				turn_right(val_array[bot_pos]);
    24c4:	80 91 e4 0e 	lds	r24, 0x0EE4
    24c8:	90 91 e5 0e 	lds	r25, 0x0EE5
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	fc 01       	movw	r30, r24
    24d2:	e0 5f       	subi	r30, 0xF0	; 240
    24d4:	f8 4f       	sbci	r31, 0xF8	; 248
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	0e 94 1b 10 	call	0x2036	; 0x2036 <turn_right>
    24de:	3d c0       	rjmp	.+122    	; 0x255a <main+0x1d4>
			}
			else if (mov_array[bot_pos] == 'L'){
    24e0:	80 91 e4 0e 	lds	r24, 0x0EE4
    24e4:	90 91 e5 0e 	lds	r25, 0x0EE5
    24e8:	fc 01       	movw	r30, r24
    24ea:	ec 5d       	subi	r30, 0xDC	; 220
    24ec:	fc 4f       	sbci	r31, 0xFC	; 252
    24ee:	80 81       	ld	r24, Z
    24f0:	8c 34       	cpi	r24, 0x4C	; 76
    24f2:	91 f4       	brne	.+36     	; 0x2518 <main+0x192>
				lcd_string("L");
    24f4:	8e e0       	ldi	r24, 0x0E	; 14
    24f6:	92 e0       	ldi	r25, 0x02	; 2
    24f8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
				turn_left(val_array[bot_pos]);
    24fc:	80 91 e4 0e 	lds	r24, 0x0EE4
    2500:	90 91 e5 0e 	lds	r25, 0x0EE5
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	fc 01       	movw	r30, r24
    250a:	e0 5f       	subi	r30, 0xF0	; 240
    250c:	f8 4f       	sbci	r31, 0xF8	; 248
    250e:	80 81       	ld	r24, Z
    2510:	91 81       	ldd	r25, Z+1	; 0x01
    2512:	0e 94 b6 10 	call	0x216c	; 0x216c <turn_left>
    2516:	21 c0       	rjmp	.+66     	; 0x255a <main+0x1d4>
			}
			else if (mov_array[bot_pos] == 'U'){
    2518:	80 91 e4 0e 	lds	r24, 0x0EE4
    251c:	90 91 e5 0e 	lds	r25, 0x0EE5
    2520:	fc 01       	movw	r30, r24
    2522:	ec 5d       	subi	r30, 0xDC	; 220
    2524:	fc 4f       	sbci	r31, 0xFC	; 252
    2526:	80 81       	ld	r24, Z
    2528:	85 35       	cpi	r24, 0x55	; 85
    252a:	39 f4       	brne	.+14     	; 0x253a <main+0x1b4>
				lcd_string("U");
    252c:	80 e1       	ldi	r24, 0x10	; 16
    252e:	92 e0       	ldi	r25, 0x02	; 2
    2530:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
				pen_up();
    2534:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <pen_up>
    2538:	10 c0       	rjmp	.+32     	; 0x255a <main+0x1d4>
			}
			else if (mov_array[bot_pos] == 'D'){
    253a:	80 91 e4 0e 	lds	r24, 0x0EE4
    253e:	90 91 e5 0e 	lds	r25, 0x0EE5
    2542:	fc 01       	movw	r30, r24
    2544:	ec 5d       	subi	r30, 0xDC	; 220
    2546:	fc 4f       	sbci	r31, 0xFC	; 252
    2548:	80 81       	ld	r24, Z
    254a:	84 34       	cpi	r24, 0x44	; 68
    254c:	31 f4       	brne	.+12     	; 0x255a <main+0x1d4>
				lcd_string("D");
    254e:	82 e1       	ldi	r24, 0x12	; 18
    2550:	92 e0       	ldi	r25, 0x02	; 2
    2552:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_string>
				pen_down();
    2556:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <pen_down>
			}
			bot_pos++;
    255a:	80 91 e4 0e 	lds	r24, 0x0EE4
    255e:	90 91 e5 0e 	lds	r25, 0x0EE5
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	90 93 e5 0e 	sts	0x0EE5, r25
    2568:	80 93 e4 0e 	sts	0x0EE4, r24
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	aa e7       	ldi	r26, 0x7A	; 122
    2572:	b4 e4       	ldi	r27, 0x44	; 68
    2574:	8b 87       	std	Y+11, r24	; 0x0b
    2576:	9c 87       	std	Y+12, r25	; 0x0c
    2578:	ad 87       	std	Y+13, r26	; 0x0d
    257a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	26 e6       	ldi	r18, 0x66	; 102
    2586:	36 e6       	ldi	r19, 0x66	; 102
    2588:	46 e6       	ldi	r20, 0x66	; 102
    258a:	55 e4       	ldi	r21, 0x45	; 69
    258c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    2598:	a9 87       	std	Y+9, r26	; 0x09
    259a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <main+0x238>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <main+0x2b6>
	else if (__tmp > 65535)
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <main+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <main+0x298>
    2600:	80 e7       	ldi	r24, 0x70	; 112
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <main+0x286>
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <main+0x27a>
    2626:	e2 ce       	rjmp	.-572    	; 0x23ec <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <main+0x2c2>
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	cd ce       	rjmp	.-614    	; 0x23ec <main+0x66>

00002652 <__fixunssfsi>:
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	7b 01       	movw	r14, r22
    265c:	8c 01       	movw	r16, r24
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	5f e4       	ldi	r21, 0x4F	; 79
    2666:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    266a:	88 23       	and	r24, r24
    266c:	8c f0       	brlt	.+34     	; 0x2690 <__fixunssfsi+0x3e>
    266e:	c8 01       	movw	r24, r16
    2670:	b7 01       	movw	r22, r14
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	5f e4       	ldi	r21, 0x4F	; 79
    267a:	0e 94 a1 14 	call	0x2942	; 0x2942 <__subsf3>
    267e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fixsfsi>
    2682:	9b 01       	movw	r18, r22
    2684:	ac 01       	movw	r20, r24
    2686:	20 50       	subi	r18, 0x00	; 0
    2688:	30 40       	sbci	r19, 0x00	; 0
    268a:	40 40       	sbci	r20, 0x00	; 0
    268c:	50 48       	sbci	r21, 0x80	; 128
    268e:	06 c0       	rjmp	.+12     	; 0x269c <__fixunssfsi+0x4a>
    2690:	c8 01       	movw	r24, r16
    2692:	b7 01       	movw	r22, r14
    2694:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fixsfsi>
    2698:	9b 01       	movw	r18, r22
    269a:	ac 01       	movw	r20, r24
    269c:	b9 01       	movw	r22, r18
    269e:	ca 01       	movw	r24, r20
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	08 95       	ret

000026aa <_fpadd_parts>:
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	eb e5       	ldi	r30, 0x5B	; 91
    26b0:	f3 e1       	ldi	r31, 0x13	; 19
    26b2:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__prologue_saves__>
    26b6:	dc 01       	movw	r26, r24
    26b8:	2b 01       	movw	r4, r22
    26ba:	fa 01       	movw	r30, r20
    26bc:	9c 91       	ld	r25, X
    26be:	92 30       	cpi	r25, 0x02	; 2
    26c0:	08 f4       	brcc	.+2      	; 0x26c4 <_fpadd_parts+0x1a>
    26c2:	39 c1       	rjmp	.+626    	; 0x2936 <_fpadd_parts+0x28c>
    26c4:	eb 01       	movw	r28, r22
    26c6:	88 81       	ld	r24, Y
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	08 f4       	brcc	.+2      	; 0x26ce <_fpadd_parts+0x24>
    26cc:	33 c1       	rjmp	.+614    	; 0x2934 <_fpadd_parts+0x28a>
    26ce:	94 30       	cpi	r25, 0x04	; 4
    26d0:	69 f4       	brne	.+26     	; 0x26ec <_fpadd_parts+0x42>
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <_fpadd_parts+0x2e>
    26d6:	2f c1       	rjmp	.+606    	; 0x2936 <_fpadd_parts+0x28c>
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	9c 91       	ld	r25, X
    26dc:	11 97       	sbiw	r26, 0x01	; 1
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	98 17       	cp	r25, r24
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <_fpadd_parts+0x3c>
    26e4:	28 c1       	rjmp	.+592    	; 0x2936 <_fpadd_parts+0x28c>
    26e6:	a4 e1       	ldi	r26, 0x14	; 20
    26e8:	b2 e0       	ldi	r27, 0x02	; 2
    26ea:	25 c1       	rjmp	.+586    	; 0x2936 <_fpadd_parts+0x28c>
    26ec:	84 30       	cpi	r24, 0x04	; 4
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <_fpadd_parts+0x48>
    26f0:	21 c1       	rjmp	.+578    	; 0x2934 <_fpadd_parts+0x28a>
    26f2:	82 30       	cpi	r24, 0x02	; 2
    26f4:	a9 f4       	brne	.+42     	; 0x2720 <_fpadd_parts+0x76>
    26f6:	92 30       	cpi	r25, 0x02	; 2
    26f8:	09 f0       	breq	.+2      	; 0x26fc <_fpadd_parts+0x52>
    26fa:	1d c1       	rjmp	.+570    	; 0x2936 <_fpadd_parts+0x28c>
    26fc:	9a 01       	movw	r18, r20
    26fe:	ad 01       	movw	r20, r26
    2700:	88 e0       	ldi	r24, 0x08	; 8
    2702:	ea 01       	movw	r28, r20
    2704:	09 90       	ld	r0, Y+
    2706:	ae 01       	movw	r20, r28
    2708:	e9 01       	movw	r28, r18
    270a:	09 92       	st	Y+, r0
    270c:	9e 01       	movw	r18, r28
    270e:	81 50       	subi	r24, 0x01	; 1
    2710:	c1 f7       	brne	.-16     	; 0x2702 <_fpadd_parts+0x58>
    2712:	e2 01       	movw	r28, r4
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	11 96       	adiw	r26, 0x01	; 1
    2718:	9c 91       	ld	r25, X
    271a:	89 23       	and	r24, r25
    271c:	81 83       	std	Z+1, r24	; 0x01
    271e:	08 c1       	rjmp	.+528    	; 0x2930 <_fpadd_parts+0x286>
    2720:	92 30       	cpi	r25, 0x02	; 2
    2722:	09 f4       	brne	.+2      	; 0x2726 <_fpadd_parts+0x7c>
    2724:	07 c1       	rjmp	.+526    	; 0x2934 <_fpadd_parts+0x28a>
    2726:	12 96       	adiw	r26, 0x02	; 2
    2728:	2d 90       	ld	r2, X+
    272a:	3c 90       	ld	r3, X
    272c:	13 97       	sbiw	r26, 0x03	; 3
    272e:	eb 01       	movw	r28, r22
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	9b 81       	ldd	r25, Y+3	; 0x03
    2734:	14 96       	adiw	r26, 0x04	; 4
    2736:	ad 90       	ld	r10, X+
    2738:	bd 90       	ld	r11, X+
    273a:	cd 90       	ld	r12, X+
    273c:	dc 90       	ld	r13, X
    273e:	17 97       	sbiw	r26, 0x07	; 7
    2740:	ec 80       	ldd	r14, Y+4	; 0x04
    2742:	fd 80       	ldd	r15, Y+5	; 0x05
    2744:	0e 81       	ldd	r16, Y+6	; 0x06
    2746:	1f 81       	ldd	r17, Y+7	; 0x07
    2748:	91 01       	movw	r18, r2
    274a:	28 1b       	sub	r18, r24
    274c:	39 0b       	sbc	r19, r25
    274e:	b9 01       	movw	r22, r18
    2750:	37 ff       	sbrs	r19, 7
    2752:	04 c0       	rjmp	.+8      	; 0x275c <_fpadd_parts+0xb2>
    2754:	66 27       	eor	r22, r22
    2756:	77 27       	eor	r23, r23
    2758:	62 1b       	sub	r22, r18
    275a:	73 0b       	sbc	r23, r19
    275c:	60 32       	cpi	r22, 0x20	; 32
    275e:	71 05       	cpc	r23, r1
    2760:	0c f0       	brlt	.+2      	; 0x2764 <_fpadd_parts+0xba>
    2762:	61 c0       	rjmp	.+194    	; 0x2826 <_fpadd_parts+0x17c>
    2764:	12 16       	cp	r1, r18
    2766:	13 06       	cpc	r1, r19
    2768:	6c f5       	brge	.+90     	; 0x27c4 <_fpadd_parts+0x11a>
    276a:	37 01       	movw	r6, r14
    276c:	48 01       	movw	r8, r16
    276e:	06 2e       	mov	r0, r22
    2770:	04 c0       	rjmp	.+8      	; 0x277a <_fpadd_parts+0xd0>
    2772:	96 94       	lsr	r9
    2774:	87 94       	ror	r8
    2776:	77 94       	ror	r7
    2778:	67 94       	ror	r6
    277a:	0a 94       	dec	r0
    277c:	d2 f7       	brpl	.-12     	; 0x2772 <_fpadd_parts+0xc8>
    277e:	21 e0       	ldi	r18, 0x01	; 1
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <_fpadd_parts+0xe6>
    2788:	22 0f       	add	r18, r18
    278a:	33 1f       	adc	r19, r19
    278c:	44 1f       	adc	r20, r20
    278e:	55 1f       	adc	r21, r21
    2790:	6a 95       	dec	r22
    2792:	d2 f7       	brpl	.-12     	; 0x2788 <_fpadd_parts+0xde>
    2794:	21 50       	subi	r18, 0x01	; 1
    2796:	30 40       	sbci	r19, 0x00	; 0
    2798:	40 40       	sbci	r20, 0x00	; 0
    279a:	50 40       	sbci	r21, 0x00	; 0
    279c:	2e 21       	and	r18, r14
    279e:	3f 21       	and	r19, r15
    27a0:	40 23       	and	r20, r16
    27a2:	51 23       	and	r21, r17
    27a4:	21 15       	cp	r18, r1
    27a6:	31 05       	cpc	r19, r1
    27a8:	41 05       	cpc	r20, r1
    27aa:	51 05       	cpc	r21, r1
    27ac:	21 f0       	breq	.+8      	; 0x27b6 <_fpadd_parts+0x10c>
    27ae:	21 e0       	ldi	r18, 0x01	; 1
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	79 01       	movw	r14, r18
    27b8:	8a 01       	movw	r16, r20
    27ba:	e6 28       	or	r14, r6
    27bc:	f7 28       	or	r15, r7
    27be:	08 29       	or	r16, r8
    27c0:	19 29       	or	r17, r9
    27c2:	3c c0       	rjmp	.+120    	; 0x283c <_fpadd_parts+0x192>
    27c4:	23 2b       	or	r18, r19
    27c6:	d1 f1       	breq	.+116    	; 0x283c <_fpadd_parts+0x192>
    27c8:	26 0e       	add	r2, r22
    27ca:	37 1e       	adc	r3, r23
    27cc:	35 01       	movw	r6, r10
    27ce:	46 01       	movw	r8, r12
    27d0:	06 2e       	mov	r0, r22
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <_fpadd_parts+0x132>
    27d4:	96 94       	lsr	r9
    27d6:	87 94       	ror	r8
    27d8:	77 94       	ror	r7
    27da:	67 94       	ror	r6
    27dc:	0a 94       	dec	r0
    27de:	d2 f7       	brpl	.-12     	; 0x27d4 <_fpadd_parts+0x12a>
    27e0:	21 e0       	ldi	r18, 0x01	; 1
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <_fpadd_parts+0x148>
    27ea:	22 0f       	add	r18, r18
    27ec:	33 1f       	adc	r19, r19
    27ee:	44 1f       	adc	r20, r20
    27f0:	55 1f       	adc	r21, r21
    27f2:	6a 95       	dec	r22
    27f4:	d2 f7       	brpl	.-12     	; 0x27ea <_fpadd_parts+0x140>
    27f6:	21 50       	subi	r18, 0x01	; 1
    27f8:	30 40       	sbci	r19, 0x00	; 0
    27fa:	40 40       	sbci	r20, 0x00	; 0
    27fc:	50 40       	sbci	r21, 0x00	; 0
    27fe:	2a 21       	and	r18, r10
    2800:	3b 21       	and	r19, r11
    2802:	4c 21       	and	r20, r12
    2804:	5d 21       	and	r21, r13
    2806:	21 15       	cp	r18, r1
    2808:	31 05       	cpc	r19, r1
    280a:	41 05       	cpc	r20, r1
    280c:	51 05       	cpc	r21, r1
    280e:	21 f0       	breq	.+8      	; 0x2818 <_fpadd_parts+0x16e>
    2810:	21 e0       	ldi	r18, 0x01	; 1
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	59 01       	movw	r10, r18
    281a:	6a 01       	movw	r12, r20
    281c:	a6 28       	or	r10, r6
    281e:	b7 28       	or	r11, r7
    2820:	c8 28       	or	r12, r8
    2822:	d9 28       	or	r13, r9
    2824:	0b c0       	rjmp	.+22     	; 0x283c <_fpadd_parts+0x192>
    2826:	82 15       	cp	r24, r2
    2828:	93 05       	cpc	r25, r3
    282a:	2c f0       	brlt	.+10     	; 0x2836 <_fpadd_parts+0x18c>
    282c:	1c 01       	movw	r2, r24
    282e:	aa 24       	eor	r10, r10
    2830:	bb 24       	eor	r11, r11
    2832:	65 01       	movw	r12, r10
    2834:	03 c0       	rjmp	.+6      	; 0x283c <_fpadd_parts+0x192>
    2836:	ee 24       	eor	r14, r14
    2838:	ff 24       	eor	r15, r15
    283a:	87 01       	movw	r16, r14
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	9c 91       	ld	r25, X
    2840:	d2 01       	movw	r26, r4
    2842:	11 96       	adiw	r26, 0x01	; 1
    2844:	8c 91       	ld	r24, X
    2846:	98 17       	cp	r25, r24
    2848:	09 f4       	brne	.+2      	; 0x284c <_fpadd_parts+0x1a2>
    284a:	45 c0       	rjmp	.+138    	; 0x28d6 <_fpadd_parts+0x22c>
    284c:	99 23       	and	r25, r25
    284e:	39 f0       	breq	.+14     	; 0x285e <_fpadd_parts+0x1b4>
    2850:	a8 01       	movw	r20, r16
    2852:	97 01       	movw	r18, r14
    2854:	2a 19       	sub	r18, r10
    2856:	3b 09       	sbc	r19, r11
    2858:	4c 09       	sbc	r20, r12
    285a:	5d 09       	sbc	r21, r13
    285c:	06 c0       	rjmp	.+12     	; 0x286a <_fpadd_parts+0x1c0>
    285e:	a6 01       	movw	r20, r12
    2860:	95 01       	movw	r18, r10
    2862:	2e 19       	sub	r18, r14
    2864:	3f 09       	sbc	r19, r15
    2866:	40 0b       	sbc	r20, r16
    2868:	51 0b       	sbc	r21, r17
    286a:	57 fd       	sbrc	r21, 7
    286c:	08 c0       	rjmp	.+16     	; 0x287e <_fpadd_parts+0x1d4>
    286e:	11 82       	std	Z+1, r1	; 0x01
    2870:	33 82       	std	Z+3, r3	; 0x03
    2872:	22 82       	std	Z+2, r2	; 0x02
    2874:	24 83       	std	Z+4, r18	; 0x04
    2876:	35 83       	std	Z+5, r19	; 0x05
    2878:	46 83       	std	Z+6, r20	; 0x06
    287a:	57 83       	std	Z+7, r21	; 0x07
    287c:	1d c0       	rjmp	.+58     	; 0x28b8 <_fpadd_parts+0x20e>
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	81 83       	std	Z+1, r24	; 0x01
    2882:	33 82       	std	Z+3, r3	; 0x03
    2884:	22 82       	std	Z+2, r2	; 0x02
    2886:	88 27       	eor	r24, r24
    2888:	99 27       	eor	r25, r25
    288a:	dc 01       	movw	r26, r24
    288c:	82 1b       	sub	r24, r18
    288e:	93 0b       	sbc	r25, r19
    2890:	a4 0b       	sbc	r26, r20
    2892:	b5 0b       	sbc	r27, r21
    2894:	84 83       	std	Z+4, r24	; 0x04
    2896:	95 83       	std	Z+5, r25	; 0x05
    2898:	a6 83       	std	Z+6, r26	; 0x06
    289a:	b7 83       	std	Z+7, r27	; 0x07
    289c:	0d c0       	rjmp	.+26     	; 0x28b8 <_fpadd_parts+0x20e>
    289e:	22 0f       	add	r18, r18
    28a0:	33 1f       	adc	r19, r19
    28a2:	44 1f       	adc	r20, r20
    28a4:	55 1f       	adc	r21, r21
    28a6:	24 83       	std	Z+4, r18	; 0x04
    28a8:	35 83       	std	Z+5, r19	; 0x05
    28aa:	46 83       	std	Z+6, r20	; 0x06
    28ac:	57 83       	std	Z+7, r21	; 0x07
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	93 83       	std	Z+3, r25	; 0x03
    28b6:	82 83       	std	Z+2, r24	; 0x02
    28b8:	24 81       	ldd	r18, Z+4	; 0x04
    28ba:	35 81       	ldd	r19, Z+5	; 0x05
    28bc:	46 81       	ldd	r20, Z+6	; 0x06
    28be:	57 81       	ldd	r21, Z+7	; 0x07
    28c0:	da 01       	movw	r26, r20
    28c2:	c9 01       	movw	r24, r18
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	a1 09       	sbc	r26, r1
    28c8:	b1 09       	sbc	r27, r1
    28ca:	8f 5f       	subi	r24, 0xFF	; 255
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	af 4f       	sbci	r26, 0xFF	; 255
    28d0:	bf 43       	sbci	r27, 0x3F	; 63
    28d2:	28 f3       	brcs	.-54     	; 0x289e <_fpadd_parts+0x1f4>
    28d4:	0b c0       	rjmp	.+22     	; 0x28ec <_fpadd_parts+0x242>
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	33 82       	std	Z+3, r3	; 0x03
    28da:	22 82       	std	Z+2, r2	; 0x02
    28dc:	ea 0c       	add	r14, r10
    28de:	fb 1c       	adc	r15, r11
    28e0:	0c 1d       	adc	r16, r12
    28e2:	1d 1d       	adc	r17, r13
    28e4:	e4 82       	std	Z+4, r14	; 0x04
    28e6:	f5 82       	std	Z+5, r15	; 0x05
    28e8:	06 83       	std	Z+6, r16	; 0x06
    28ea:	17 83       	std	Z+7, r17	; 0x07
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	80 83       	st	Z, r24
    28f0:	24 81       	ldd	r18, Z+4	; 0x04
    28f2:	35 81       	ldd	r19, Z+5	; 0x05
    28f4:	46 81       	ldd	r20, Z+6	; 0x06
    28f6:	57 81       	ldd	r21, Z+7	; 0x07
    28f8:	57 ff       	sbrs	r21, 7
    28fa:	1a c0       	rjmp	.+52     	; 0x2930 <_fpadd_parts+0x286>
    28fc:	c9 01       	movw	r24, r18
    28fe:	aa 27       	eor	r26, r26
    2900:	97 fd       	sbrc	r25, 7
    2902:	a0 95       	com	r26
    2904:	ba 2f       	mov	r27, r26
    2906:	81 70       	andi	r24, 0x01	; 1
    2908:	90 70       	andi	r25, 0x00	; 0
    290a:	a0 70       	andi	r26, 0x00	; 0
    290c:	b0 70       	andi	r27, 0x00	; 0
    290e:	56 95       	lsr	r21
    2910:	47 95       	ror	r20
    2912:	37 95       	ror	r19
    2914:	27 95       	ror	r18
    2916:	82 2b       	or	r24, r18
    2918:	93 2b       	or	r25, r19
    291a:	a4 2b       	or	r26, r20
    291c:	b5 2b       	or	r27, r21
    291e:	84 83       	std	Z+4, r24	; 0x04
    2920:	95 83       	std	Z+5, r25	; 0x05
    2922:	a6 83       	std	Z+6, r26	; 0x06
    2924:	b7 83       	std	Z+7, r27	; 0x07
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	93 83       	std	Z+3, r25	; 0x03
    292e:	82 83       	std	Z+2, r24	; 0x02
    2930:	df 01       	movw	r26, r30
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <_fpadd_parts+0x28c>
    2934:	d2 01       	movw	r26, r4
    2936:	cd 01       	movw	r24, r26
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	e2 e1       	ldi	r30, 0x12	; 18
    293e:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__epilogue_restores__>

00002942 <__subsf3>:
    2942:	a0 e2       	ldi	r26, 0x20	; 32
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e7 ea       	ldi	r30, 0xA7	; 167
    2948:	f4 e1       	ldi	r31, 0x14	; 20
    294a:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__+0x18>
    294e:	69 83       	std	Y+1, r22	; 0x01
    2950:	7a 83       	std	Y+2, r23	; 0x02
    2952:	8b 83       	std	Y+3, r24	; 0x03
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	2d 83       	std	Y+5, r18	; 0x05
    2958:	3e 83       	std	Y+6, r19	; 0x06
    295a:	4f 83       	std	Y+7, r20	; 0x07
    295c:	58 87       	std	Y+8, r21	; 0x08
    295e:	e9 e0       	ldi	r30, 0x09	; 9
    2960:	ee 2e       	mov	r14, r30
    2962:	f1 2c       	mov	r15, r1
    2964:	ec 0e       	add	r14, r28
    2966:	fd 1e       	adc	r15, r29
    2968:	ce 01       	movw	r24, r28
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	b7 01       	movw	r22, r14
    296e:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2972:	8e 01       	movw	r16, r28
    2974:	0f 5e       	subi	r16, 0xEF	; 239
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	ce 01       	movw	r24, r28
    297a:	05 96       	adiw	r24, 0x05	; 5
    297c:	b8 01       	movw	r22, r16
    297e:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2982:	8a 89       	ldd	r24, Y+18	; 0x12
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	89 27       	eor	r24, r25
    2988:	8a 8b       	std	Y+18, r24	; 0x12
    298a:	c7 01       	movw	r24, r14
    298c:	b8 01       	movw	r22, r16
    298e:	ae 01       	movw	r20, r28
    2990:	47 5e       	subi	r20, 0xE7	; 231
    2992:	5f 4f       	sbci	r21, 0xFF	; 255
    2994:	0e 94 55 13 	call	0x26aa	; 0x26aa <_fpadd_parts>
    2998:	0e 94 af 18 	call	0x315e	; 0x315e <__pack_f>
    299c:	a0 96       	adiw	r28, 0x20	; 32
    299e:	e6 e0       	ldi	r30, 0x06	; 6
    29a0:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__+0x18>

000029a4 <__addsf3>:
    29a4:	a0 e2       	ldi	r26, 0x20	; 32
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e8 ed       	ldi	r30, 0xD8	; 216
    29aa:	f4 e1       	ldi	r31, 0x14	; 20
    29ac:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__+0x18>
    29b0:	69 83       	std	Y+1, r22	; 0x01
    29b2:	7a 83       	std	Y+2, r23	; 0x02
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	9c 83       	std	Y+4, r25	; 0x04
    29b8:	2d 83       	std	Y+5, r18	; 0x05
    29ba:	3e 83       	std	Y+6, r19	; 0x06
    29bc:	4f 83       	std	Y+7, r20	; 0x07
    29be:	58 87       	std	Y+8, r21	; 0x08
    29c0:	f9 e0       	ldi	r31, 0x09	; 9
    29c2:	ef 2e       	mov	r14, r31
    29c4:	f1 2c       	mov	r15, r1
    29c6:	ec 0e       	add	r14, r28
    29c8:	fd 1e       	adc	r15, r29
    29ca:	ce 01       	movw	r24, r28
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	b7 01       	movw	r22, r14
    29d0:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    29d4:	8e 01       	movw	r16, r28
    29d6:	0f 5e       	subi	r16, 0xEF	; 239
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	ce 01       	movw	r24, r28
    29dc:	05 96       	adiw	r24, 0x05	; 5
    29de:	b8 01       	movw	r22, r16
    29e0:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    29e4:	c7 01       	movw	r24, r14
    29e6:	b8 01       	movw	r22, r16
    29e8:	ae 01       	movw	r20, r28
    29ea:	47 5e       	subi	r20, 0xE7	; 231
    29ec:	5f 4f       	sbci	r21, 0xFF	; 255
    29ee:	0e 94 55 13 	call	0x26aa	; 0x26aa <_fpadd_parts>
    29f2:	0e 94 af 18 	call	0x315e	; 0x315e <__pack_f>
    29f6:	a0 96       	adiw	r28, 0x20	; 32
    29f8:	e6 e0       	ldi	r30, 0x06	; 6
    29fa:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__+0x18>

000029fe <__mulsf3>:
    29fe:	a0 e2       	ldi	r26, 0x20	; 32
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e5 e0       	ldi	r30, 0x05	; 5
    2a04:	f5 e1       	ldi	r31, 0x15	; 21
    2a06:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__prologue_saves__>
    2a0a:	69 83       	std	Y+1, r22	; 0x01
    2a0c:	7a 83       	std	Y+2, r23	; 0x02
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	2d 83       	std	Y+5, r18	; 0x05
    2a14:	3e 83       	std	Y+6, r19	; 0x06
    2a16:	4f 83       	std	Y+7, r20	; 0x07
    2a18:	58 87       	std	Y+8, r21	; 0x08
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	be 01       	movw	r22, r28
    2a20:	67 5f       	subi	r22, 0xF7	; 247
    2a22:	7f 4f       	sbci	r23, 0xFF	; 255
    2a24:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2a28:	ce 01       	movw	r24, r28
    2a2a:	05 96       	adiw	r24, 0x05	; 5
    2a2c:	be 01       	movw	r22, r28
    2a2e:	6f 5e       	subi	r22, 0xEF	; 239
    2a30:	7f 4f       	sbci	r23, 0xFF	; 255
    2a32:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2a36:	99 85       	ldd	r25, Y+9	; 0x09
    2a38:	92 30       	cpi	r25, 0x02	; 2
    2a3a:	88 f0       	brcs	.+34     	; 0x2a5e <__mulsf3+0x60>
    2a3c:	89 89       	ldd	r24, Y+17	; 0x11
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	c8 f0       	brcs	.+50     	; 0x2a74 <__mulsf3+0x76>
    2a42:	94 30       	cpi	r25, 0x04	; 4
    2a44:	19 f4       	brne	.+6      	; 0x2a4c <__mulsf3+0x4e>
    2a46:	82 30       	cpi	r24, 0x02	; 2
    2a48:	51 f4       	brne	.+20     	; 0x2a5e <__mulsf3+0x60>
    2a4a:	04 c0       	rjmp	.+8      	; 0x2a54 <__mulsf3+0x56>
    2a4c:	84 30       	cpi	r24, 0x04	; 4
    2a4e:	29 f4       	brne	.+10     	; 0x2a5a <__mulsf3+0x5c>
    2a50:	92 30       	cpi	r25, 0x02	; 2
    2a52:	81 f4       	brne	.+32     	; 0x2a74 <__mulsf3+0x76>
    2a54:	84 e1       	ldi	r24, 0x14	; 20
    2a56:	92 e0       	ldi	r25, 0x02	; 2
    2a58:	c6 c0       	rjmp	.+396    	; 0x2be6 <__mulsf3+0x1e8>
    2a5a:	92 30       	cpi	r25, 0x02	; 2
    2a5c:	49 f4       	brne	.+18     	; 0x2a70 <__mulsf3+0x72>
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a62:	8a 89       	ldd	r24, Y+18	; 0x12
    2a64:	98 13       	cpse	r25, r24
    2a66:	21 e0       	ldi	r18, 0x01	; 1
    2a68:	2a 87       	std	Y+10, r18	; 0x0a
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	09 96       	adiw	r24, 0x09	; 9
    2a6e:	bb c0       	rjmp	.+374    	; 0x2be6 <__mulsf3+0x1e8>
    2a70:	82 30       	cpi	r24, 0x02	; 2
    2a72:	49 f4       	brne	.+18     	; 0x2a86 <__mulsf3+0x88>
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7a:	98 13       	cpse	r25, r24
    2a7c:	21 e0       	ldi	r18, 0x01	; 1
    2a7e:	2a 8b       	std	Y+18, r18	; 0x12
    2a80:	ce 01       	movw	r24, r28
    2a82:	41 96       	adiw	r24, 0x11	; 17
    2a84:	b0 c0       	rjmp	.+352    	; 0x2be6 <__mulsf3+0x1e8>
    2a86:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a88:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a8a:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a8c:	58 88       	ldd	r5, Y+16	; 0x10
    2a8e:	6d 88       	ldd	r6, Y+21	; 0x15
    2a90:	7e 88       	ldd	r7, Y+22	; 0x16
    2a92:	8f 88       	ldd	r8, Y+23	; 0x17
    2a94:	98 8c       	ldd	r9, Y+24	; 0x18
    2a96:	ee 24       	eor	r14, r14
    2a98:	ff 24       	eor	r15, r15
    2a9a:	87 01       	movw	r16, r14
    2a9c:	aa 24       	eor	r10, r10
    2a9e:	bb 24       	eor	r11, r11
    2aa0:	65 01       	movw	r12, r10
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	e0 e0       	ldi	r30, 0x00	; 0
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	c1 01       	movw	r24, r2
    2ab0:	81 70       	andi	r24, 0x01	; 1
    2ab2:	90 70       	andi	r25, 0x00	; 0
    2ab4:	89 2b       	or	r24, r25
    2ab6:	e9 f0       	breq	.+58     	; 0x2af2 <__mulsf3+0xf4>
    2ab8:	e6 0c       	add	r14, r6
    2aba:	f7 1c       	adc	r15, r7
    2abc:	08 1d       	adc	r16, r8
    2abe:	19 1d       	adc	r17, r9
    2ac0:	9a 01       	movw	r18, r20
    2ac2:	ab 01       	movw	r20, r22
    2ac4:	2a 0d       	add	r18, r10
    2ac6:	3b 1d       	adc	r19, r11
    2ac8:	4c 1d       	adc	r20, r12
    2aca:	5d 1d       	adc	r21, r13
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e6 14       	cp	r14, r6
    2ad6:	f7 04       	cpc	r15, r7
    2ad8:	08 05       	cpc	r16, r8
    2ada:	19 05       	cpc	r17, r9
    2adc:	20 f4       	brcc	.+8      	; 0x2ae6 <__mulsf3+0xe8>
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 e0       	ldi	r26, 0x00	; 0
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ba 01       	movw	r22, r20
    2ae8:	a9 01       	movw	r20, r18
    2aea:	48 0f       	add	r20, r24
    2aec:	59 1f       	adc	r21, r25
    2aee:	6a 1f       	adc	r22, r26
    2af0:	7b 1f       	adc	r23, r27
    2af2:	aa 0c       	add	r10, r10
    2af4:	bb 1c       	adc	r11, r11
    2af6:	cc 1c       	adc	r12, r12
    2af8:	dd 1c       	adc	r13, r13
    2afa:	97 fe       	sbrs	r9, 7
    2afc:	08 c0       	rjmp	.+16     	; 0x2b0e <__mulsf3+0x110>
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	a8 2a       	or	r10, r24
    2b08:	b9 2a       	or	r11, r25
    2b0a:	ca 2a       	or	r12, r26
    2b0c:	db 2a       	or	r13, r27
    2b0e:	31 96       	adiw	r30, 0x01	; 1
    2b10:	e0 32       	cpi	r30, 0x20	; 32
    2b12:	f1 05       	cpc	r31, r1
    2b14:	49 f0       	breq	.+18     	; 0x2b28 <__mulsf3+0x12a>
    2b16:	66 0c       	add	r6, r6
    2b18:	77 1c       	adc	r7, r7
    2b1a:	88 1c       	adc	r8, r8
    2b1c:	99 1c       	adc	r9, r9
    2b1e:	56 94       	lsr	r5
    2b20:	47 94       	ror	r4
    2b22:	37 94       	ror	r3
    2b24:	27 94       	ror	r2
    2b26:	c3 cf       	rjmp	.-122    	; 0x2aae <__mulsf3+0xb0>
    2b28:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b2a:	ea 89       	ldd	r30, Y+18	; 0x12
    2b2c:	2b 89       	ldd	r18, Y+19	; 0x13
    2b2e:	3c 89       	ldd	r19, Y+20	; 0x14
    2b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b32:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b34:	28 0f       	add	r18, r24
    2b36:	39 1f       	adc	r19, r25
    2b38:	2e 5f       	subi	r18, 0xFE	; 254
    2b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3c:	17 c0       	rjmp	.+46     	; 0x2b6c <__mulsf3+0x16e>
    2b3e:	ca 01       	movw	r24, r20
    2b40:	81 70       	andi	r24, 0x01	; 1
    2b42:	90 70       	andi	r25, 0x00	; 0
    2b44:	89 2b       	or	r24, r25
    2b46:	61 f0       	breq	.+24     	; 0x2b60 <__mulsf3+0x162>
    2b48:	16 95       	lsr	r17
    2b4a:	07 95       	ror	r16
    2b4c:	f7 94       	ror	r15
    2b4e:	e7 94       	ror	r14
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e8       	ldi	r27, 0x80	; 128
    2b58:	e8 2a       	or	r14, r24
    2b5a:	f9 2a       	or	r15, r25
    2b5c:	0a 2b       	or	r16, r26
    2b5e:	1b 2b       	or	r17, r27
    2b60:	76 95       	lsr	r23
    2b62:	67 95       	ror	r22
    2b64:	57 95       	ror	r21
    2b66:	47 95       	ror	r20
    2b68:	2f 5f       	subi	r18, 0xFF	; 255
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	77 fd       	sbrc	r23, 7
    2b6e:	e7 cf       	rjmp	.-50     	; 0x2b3e <__mulsf3+0x140>
    2b70:	0c c0       	rjmp	.+24     	; 0x2b8a <__mulsf3+0x18c>
    2b72:	44 0f       	add	r20, r20
    2b74:	55 1f       	adc	r21, r21
    2b76:	66 1f       	adc	r22, r22
    2b78:	77 1f       	adc	r23, r23
    2b7a:	17 fd       	sbrc	r17, 7
    2b7c:	41 60       	ori	r20, 0x01	; 1
    2b7e:	ee 0c       	add	r14, r14
    2b80:	ff 1c       	adc	r15, r15
    2b82:	00 1f       	adc	r16, r16
    2b84:	11 1f       	adc	r17, r17
    2b86:	21 50       	subi	r18, 0x01	; 1
    2b88:	30 40       	sbci	r19, 0x00	; 0
    2b8a:	40 30       	cpi	r20, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	59 07       	cpc	r21, r25
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	69 07       	cpc	r22, r25
    2b94:	90 e4       	ldi	r25, 0x40	; 64
    2b96:	79 07       	cpc	r23, r25
    2b98:	60 f3       	brcs	.-40     	; 0x2b72 <__mulsf3+0x174>
    2b9a:	2b 8f       	std	Y+27, r18	; 0x1b
    2b9c:	3c 8f       	std	Y+28, r19	; 0x1c
    2b9e:	db 01       	movw	r26, r22
    2ba0:	ca 01       	movw	r24, r20
    2ba2:	8f 77       	andi	r24, 0x7F	; 127
    2ba4:	90 70       	andi	r25, 0x00	; 0
    2ba6:	a0 70       	andi	r26, 0x00	; 0
    2ba8:	b0 70       	andi	r27, 0x00	; 0
    2baa:	80 34       	cpi	r24, 0x40	; 64
    2bac:	91 05       	cpc	r25, r1
    2bae:	a1 05       	cpc	r26, r1
    2bb0:	b1 05       	cpc	r27, r1
    2bb2:	61 f4       	brne	.+24     	; 0x2bcc <__mulsf3+0x1ce>
    2bb4:	47 fd       	sbrc	r20, 7
    2bb6:	0a c0       	rjmp	.+20     	; 0x2bcc <__mulsf3+0x1ce>
    2bb8:	e1 14       	cp	r14, r1
    2bba:	f1 04       	cpc	r15, r1
    2bbc:	01 05       	cpc	r16, r1
    2bbe:	11 05       	cpc	r17, r1
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <__mulsf3+0x1ce>
    2bc2:	40 5c       	subi	r20, 0xC0	; 192
    2bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc6:	6f 4f       	sbci	r22, 0xFF	; 255
    2bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bca:	40 78       	andi	r20, 0x80	; 128
    2bcc:	1a 8e       	std	Y+26, r1	; 0x1a
    2bce:	fe 17       	cp	r31, r30
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <__mulsf3+0x1d8>
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	8a 8f       	std	Y+26, r24	; 0x1a
    2bd6:	4d 8f       	std	Y+29, r20	; 0x1d
    2bd8:	5e 8f       	std	Y+30, r21	; 0x1e
    2bda:	6f 8f       	std	Y+31, r22	; 0x1f
    2bdc:	78 a3       	std	Y+32, r23	; 0x20
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	89 8f       	std	Y+25, r24	; 0x19
    2be2:	ce 01       	movw	r24, r28
    2be4:	49 96       	adiw	r24, 0x19	; 25
    2be6:	0e 94 af 18 	call	0x315e	; 0x315e <__pack_f>
    2bea:	a0 96       	adiw	r28, 0x20	; 32
    2bec:	e2 e1       	ldi	r30, 0x12	; 18
    2bee:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__epilogue_restores__>

00002bf2 <__divsf3>:
    2bf2:	a8 e1       	ldi	r26, 0x18	; 24
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	ef ef       	ldi	r30, 0xFF	; 255
    2bf8:	f5 e1       	ldi	r31, 0x15	; 21
    2bfa:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x10>
    2bfe:	69 83       	std	Y+1, r22	; 0x01
    2c00:	7a 83       	std	Y+2, r23	; 0x02
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	2d 83       	std	Y+5, r18	; 0x05
    2c08:	3e 83       	std	Y+6, r19	; 0x06
    2c0a:	4f 83       	std	Y+7, r20	; 0x07
    2c0c:	58 87       	std	Y+8, r21	; 0x08
    2c0e:	b9 e0       	ldi	r27, 0x09	; 9
    2c10:	eb 2e       	mov	r14, r27
    2c12:	f1 2c       	mov	r15, r1
    2c14:	ec 0e       	add	r14, r28
    2c16:	fd 1e       	adc	r15, r29
    2c18:	ce 01       	movw	r24, r28
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	b7 01       	movw	r22, r14
    2c1e:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2c22:	8e 01       	movw	r16, r28
    2c24:	0f 5e       	subi	r16, 0xEF	; 239
    2c26:	1f 4f       	sbci	r17, 0xFF	; 255
    2c28:	ce 01       	movw	r24, r28
    2c2a:	05 96       	adiw	r24, 0x05	; 5
    2c2c:	b8 01       	movw	r22, r16
    2c2e:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2c32:	29 85       	ldd	r18, Y+9	; 0x09
    2c34:	22 30       	cpi	r18, 0x02	; 2
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <__divsf3+0x48>
    2c38:	7e c0       	rjmp	.+252    	; 0x2d36 <__divsf3+0x144>
    2c3a:	39 89       	ldd	r19, Y+17	; 0x11
    2c3c:	32 30       	cpi	r19, 0x02	; 2
    2c3e:	10 f4       	brcc	.+4      	; 0x2c44 <__divsf3+0x52>
    2c40:	b8 01       	movw	r22, r16
    2c42:	7c c0       	rjmp	.+248    	; 0x2d3c <__divsf3+0x14a>
    2c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c46:	9a 89       	ldd	r25, Y+18	; 0x12
    2c48:	89 27       	eor	r24, r25
    2c4a:	8a 87       	std	Y+10, r24	; 0x0a
    2c4c:	24 30       	cpi	r18, 0x04	; 4
    2c4e:	11 f0       	breq	.+4      	; 0x2c54 <__divsf3+0x62>
    2c50:	22 30       	cpi	r18, 0x02	; 2
    2c52:	31 f4       	brne	.+12     	; 0x2c60 <__divsf3+0x6e>
    2c54:	23 17       	cp	r18, r19
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <__divsf3+0x68>
    2c58:	6e c0       	rjmp	.+220    	; 0x2d36 <__divsf3+0x144>
    2c5a:	64 e1       	ldi	r22, 0x14	; 20
    2c5c:	72 e0       	ldi	r23, 0x02	; 2
    2c5e:	6e c0       	rjmp	.+220    	; 0x2d3c <__divsf3+0x14a>
    2c60:	34 30       	cpi	r19, 0x04	; 4
    2c62:	39 f4       	brne	.+14     	; 0x2c72 <__divsf3+0x80>
    2c64:	1d 86       	std	Y+13, r1	; 0x0d
    2c66:	1e 86       	std	Y+14, r1	; 0x0e
    2c68:	1f 86       	std	Y+15, r1	; 0x0f
    2c6a:	18 8a       	std	Y+16, r1	; 0x10
    2c6c:	1c 86       	std	Y+12, r1	; 0x0c
    2c6e:	1b 86       	std	Y+11, r1	; 0x0b
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <__divsf3+0x88>
    2c72:	32 30       	cpi	r19, 0x02	; 2
    2c74:	21 f4       	brne	.+8      	; 0x2c7e <__divsf3+0x8c>
    2c76:	84 e0       	ldi	r24, 0x04	; 4
    2c78:	89 87       	std	Y+9, r24	; 0x09
    2c7a:	b7 01       	movw	r22, r14
    2c7c:	5f c0       	rjmp	.+190    	; 0x2d3c <__divsf3+0x14a>
    2c7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c80:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c82:	8b 89       	ldd	r24, Y+19	; 0x13
    2c84:	9c 89       	ldd	r25, Y+20	; 0x14
    2c86:	28 1b       	sub	r18, r24
    2c88:	39 0b       	sbc	r19, r25
    2c8a:	3c 87       	std	Y+12, r19	; 0x0c
    2c8c:	2b 87       	std	Y+11, r18	; 0x0b
    2c8e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c90:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c92:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c94:	18 89       	ldd	r17, Y+16	; 0x10
    2c96:	ad 88       	ldd	r10, Y+21	; 0x15
    2c98:	be 88       	ldd	r11, Y+22	; 0x16
    2c9a:	cf 88       	ldd	r12, Y+23	; 0x17
    2c9c:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c9e:	ea 14       	cp	r14, r10
    2ca0:	fb 04       	cpc	r15, r11
    2ca2:	0c 05       	cpc	r16, r12
    2ca4:	1d 05       	cpc	r17, r13
    2ca6:	40 f4       	brcc	.+16     	; 0x2cb8 <__divsf3+0xc6>
    2ca8:	ee 0c       	add	r14, r14
    2caa:	ff 1c       	adc	r15, r15
    2cac:	00 1f       	adc	r16, r16
    2cae:	11 1f       	adc	r17, r17
    2cb0:	21 50       	subi	r18, 0x01	; 1
    2cb2:	30 40       	sbci	r19, 0x00	; 0
    2cb4:	3c 87       	std	Y+12, r19	; 0x0c
    2cb6:	2b 87       	std	Y+11, r18	; 0x0b
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e4       	ldi	r27, 0x40	; 64
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	ea 14       	cp	r14, r10
    2cce:	fb 04       	cpc	r15, r11
    2cd0:	0c 05       	cpc	r16, r12
    2cd2:	1d 05       	cpc	r17, r13
    2cd4:	40 f0       	brcs	.+16     	; 0x2ce6 <__divsf3+0xf4>
    2cd6:	28 2b       	or	r18, r24
    2cd8:	39 2b       	or	r19, r25
    2cda:	4a 2b       	or	r20, r26
    2cdc:	5b 2b       	or	r21, r27
    2cde:	ea 18       	sub	r14, r10
    2ce0:	fb 08       	sbc	r15, r11
    2ce2:	0c 09       	sbc	r16, r12
    2ce4:	1d 09       	sbc	r17, r13
    2ce6:	b6 95       	lsr	r27
    2ce8:	a7 95       	ror	r26
    2cea:	97 95       	ror	r25
    2cec:	87 95       	ror	r24
    2cee:	ee 0c       	add	r14, r14
    2cf0:	ff 1c       	adc	r15, r15
    2cf2:	00 1f       	adc	r16, r16
    2cf4:	11 1f       	adc	r17, r17
    2cf6:	6f 5f       	subi	r22, 0xFF	; 255
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfa:	6f 31       	cpi	r22, 0x1F	; 31
    2cfc:	71 05       	cpc	r23, r1
    2cfe:	31 f7       	brne	.-52     	; 0x2ccc <__divsf3+0xda>
    2d00:	da 01       	movw	r26, r20
    2d02:	c9 01       	movw	r24, r18
    2d04:	8f 77       	andi	r24, 0x7F	; 127
    2d06:	90 70       	andi	r25, 0x00	; 0
    2d08:	a0 70       	andi	r26, 0x00	; 0
    2d0a:	b0 70       	andi	r27, 0x00	; 0
    2d0c:	80 34       	cpi	r24, 0x40	; 64
    2d0e:	91 05       	cpc	r25, r1
    2d10:	a1 05       	cpc	r26, r1
    2d12:	b1 05       	cpc	r27, r1
    2d14:	61 f4       	brne	.+24     	; 0x2d2e <__divsf3+0x13c>
    2d16:	27 fd       	sbrc	r18, 7
    2d18:	0a c0       	rjmp	.+20     	; 0x2d2e <__divsf3+0x13c>
    2d1a:	e1 14       	cp	r14, r1
    2d1c:	f1 04       	cpc	r15, r1
    2d1e:	01 05       	cpc	r16, r1
    2d20:	11 05       	cpc	r17, r1
    2d22:	29 f0       	breq	.+10     	; 0x2d2e <__divsf3+0x13c>
    2d24:	20 5c       	subi	r18, 0xC0	; 192
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2c:	20 78       	andi	r18, 0x80	; 128
    2d2e:	2d 87       	std	Y+13, r18	; 0x0d
    2d30:	3e 87       	std	Y+14, r19	; 0x0e
    2d32:	4f 87       	std	Y+15, r20	; 0x0f
    2d34:	58 8b       	std	Y+16, r21	; 0x10
    2d36:	be 01       	movw	r22, r28
    2d38:	67 5f       	subi	r22, 0xF7	; 247
    2d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	0e 94 af 18 	call	0x315e	; 0x315e <__pack_f>
    2d42:	68 96       	adiw	r28, 0x18	; 24
    2d44:	ea e0       	ldi	r30, 0x0A	; 10
    2d46:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x10>

00002d4a <__gtsf2>:
    2d4a:	a8 e1       	ldi	r26, 0x18	; 24
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	eb ea       	ldi	r30, 0xAB	; 171
    2d50:	f6 e1       	ldi	r31, 0x16	; 22
    2d52:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__+0x18>
    2d56:	69 83       	std	Y+1, r22	; 0x01
    2d58:	7a 83       	std	Y+2, r23	; 0x02
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	9c 83       	std	Y+4, r25	; 0x04
    2d5e:	2d 83       	std	Y+5, r18	; 0x05
    2d60:	3e 83       	std	Y+6, r19	; 0x06
    2d62:	4f 83       	std	Y+7, r20	; 0x07
    2d64:	58 87       	std	Y+8, r21	; 0x08
    2d66:	89 e0       	ldi	r24, 0x09	; 9
    2d68:	e8 2e       	mov	r14, r24
    2d6a:	f1 2c       	mov	r15, r1
    2d6c:	ec 0e       	add	r14, r28
    2d6e:	fd 1e       	adc	r15, r29
    2d70:	ce 01       	movw	r24, r28
    2d72:	01 96       	adiw	r24, 0x01	; 1
    2d74:	b7 01       	movw	r22, r14
    2d76:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2d7a:	8e 01       	movw	r16, r28
    2d7c:	0f 5e       	subi	r16, 0xEF	; 239
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	ce 01       	movw	r24, r28
    2d82:	05 96       	adiw	r24, 0x05	; 5
    2d84:	b8 01       	movw	r22, r16
    2d86:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	82 30       	cpi	r24, 0x02	; 2
    2d8e:	40 f0       	brcs	.+16     	; 0x2da0 <__gtsf2+0x56>
    2d90:	89 89       	ldd	r24, Y+17	; 0x11
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	28 f0       	brcs	.+10     	; 0x2da0 <__gtsf2+0x56>
    2d96:	c7 01       	movw	r24, r14
    2d98:	b8 01       	movw	r22, r16
    2d9a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__fpcmp_parts_f>
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <__gtsf2+0x58>
    2da0:	8f ef       	ldi	r24, 0xFF	; 255
    2da2:	68 96       	adiw	r28, 0x18	; 24
    2da4:	e6 e0       	ldi	r30, 0x06	; 6
    2da6:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__+0x18>

00002daa <__gesf2>:
    2daa:	a8 e1       	ldi	r26, 0x18	; 24
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	eb ed       	ldi	r30, 0xDB	; 219
    2db0:	f6 e1       	ldi	r31, 0x16	; 22
    2db2:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__+0x18>
    2db6:	69 83       	std	Y+1, r22	; 0x01
    2db8:	7a 83       	std	Y+2, r23	; 0x02
    2dba:	8b 83       	std	Y+3, r24	; 0x03
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	2d 83       	std	Y+5, r18	; 0x05
    2dc0:	3e 83       	std	Y+6, r19	; 0x06
    2dc2:	4f 83       	std	Y+7, r20	; 0x07
    2dc4:	58 87       	std	Y+8, r21	; 0x08
    2dc6:	89 e0       	ldi	r24, 0x09	; 9
    2dc8:	e8 2e       	mov	r14, r24
    2dca:	f1 2c       	mov	r15, r1
    2dcc:	ec 0e       	add	r14, r28
    2dce:	fd 1e       	adc	r15, r29
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	b7 01       	movw	r22, r14
    2dd6:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2dda:	8e 01       	movw	r16, r28
    2ddc:	0f 5e       	subi	r16, 0xEF	; 239
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	ce 01       	movw	r24, r28
    2de2:	05 96       	adiw	r24, 0x05	; 5
    2de4:	b8 01       	movw	r22, r16
    2de6:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	40 f0       	brcs	.+16     	; 0x2e00 <__gesf2+0x56>
    2df0:	89 89       	ldd	r24, Y+17	; 0x11
    2df2:	82 30       	cpi	r24, 0x02	; 2
    2df4:	28 f0       	brcs	.+10     	; 0x2e00 <__gesf2+0x56>
    2df6:	c7 01       	movw	r24, r14
    2df8:	b8 01       	movw	r22, r16
    2dfa:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__fpcmp_parts_f>
    2dfe:	01 c0       	rjmp	.+2      	; 0x2e02 <__gesf2+0x58>
    2e00:	8f ef       	ldi	r24, 0xFF	; 255
    2e02:	68 96       	adiw	r28, 0x18	; 24
    2e04:	e6 e0       	ldi	r30, 0x06	; 6
    2e06:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__+0x18>

00002e0a <__ltsf2>:
    2e0a:	a8 e1       	ldi	r26, 0x18	; 24
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	eb e0       	ldi	r30, 0x0B	; 11
    2e10:	f7 e1       	ldi	r31, 0x17	; 23
    2e12:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__+0x18>
    2e16:	69 83       	std	Y+1, r22	; 0x01
    2e18:	7a 83       	std	Y+2, r23	; 0x02
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	2d 83       	std	Y+5, r18	; 0x05
    2e20:	3e 83       	std	Y+6, r19	; 0x06
    2e22:	4f 83       	std	Y+7, r20	; 0x07
    2e24:	58 87       	std	Y+8, r21	; 0x08
    2e26:	89 e0       	ldi	r24, 0x09	; 9
    2e28:	e8 2e       	mov	r14, r24
    2e2a:	f1 2c       	mov	r15, r1
    2e2c:	ec 0e       	add	r14, r28
    2e2e:	fd 1e       	adc	r15, r29
    2e30:	ce 01       	movw	r24, r28
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	b7 01       	movw	r22, r14
    2e36:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	0f 5e       	subi	r16, 0xEF	; 239
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	ce 01       	movw	r24, r28
    2e42:	05 96       	adiw	r24, 0x05	; 5
    2e44:	b8 01       	movw	r22, r16
    2e46:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	82 30       	cpi	r24, 0x02	; 2
    2e4e:	40 f0       	brcs	.+16     	; 0x2e60 <__ltsf2+0x56>
    2e50:	89 89       	ldd	r24, Y+17	; 0x11
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	28 f0       	brcs	.+10     	; 0x2e60 <__ltsf2+0x56>
    2e56:	c7 01       	movw	r24, r14
    2e58:	b8 01       	movw	r22, r16
    2e5a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__fpcmp_parts_f>
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <__ltsf2+0x58>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	68 96       	adiw	r28, 0x18	; 24
    2e64:	e6 e0       	ldi	r30, 0x06	; 6
    2e66:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__+0x18>

00002e6a <__floatsisf>:
    2e6a:	a8 e0       	ldi	r26, 0x08	; 8
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	eb e3       	ldi	r30, 0x3B	; 59
    2e70:	f7 e1       	ldi	r31, 0x17	; 23
    2e72:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x12>
    2e76:	9b 01       	movw	r18, r22
    2e78:	ac 01       	movw	r20, r24
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	da 01       	movw	r26, r20
    2e80:	c9 01       	movw	r24, r18
    2e82:	88 27       	eor	r24, r24
    2e84:	b7 fd       	sbrc	r27, 7
    2e86:	83 95       	inc	r24
    2e88:	99 27       	eor	r25, r25
    2e8a:	aa 27       	eor	r26, r26
    2e8c:	bb 27       	eor	r27, r27
    2e8e:	b8 2e       	mov	r11, r24
    2e90:	21 15       	cp	r18, r1
    2e92:	31 05       	cpc	r19, r1
    2e94:	41 05       	cpc	r20, r1
    2e96:	51 05       	cpc	r21, r1
    2e98:	19 f4       	brne	.+6      	; 0x2ea0 <__floatsisf+0x36>
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	3a c0       	rjmp	.+116    	; 0x2f14 <__floatsisf+0xaa>
    2ea0:	88 23       	and	r24, r24
    2ea2:	a9 f0       	breq	.+42     	; 0x2ece <__floatsisf+0x64>
    2ea4:	20 30       	cpi	r18, 0x00	; 0
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	38 07       	cpc	r19, r24
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	48 07       	cpc	r20, r24
    2eae:	80 e8       	ldi	r24, 0x80	; 128
    2eb0:	58 07       	cpc	r21, r24
    2eb2:	29 f4       	brne	.+10     	; 0x2ebe <__floatsisf+0x54>
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	9f ec       	ldi	r25, 0xCF	; 207
    2ebc:	30 c0       	rjmp	.+96     	; 0x2f1e <__floatsisf+0xb4>
    2ebe:	ee 24       	eor	r14, r14
    2ec0:	ff 24       	eor	r15, r15
    2ec2:	87 01       	movw	r16, r14
    2ec4:	e2 1a       	sub	r14, r18
    2ec6:	f3 0a       	sbc	r15, r19
    2ec8:	04 0b       	sbc	r16, r20
    2eca:	15 0b       	sbc	r17, r21
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <__floatsisf+0x68>
    2ece:	79 01       	movw	r14, r18
    2ed0:	8a 01       	movw	r16, r20
    2ed2:	8e e1       	ldi	r24, 0x1E	; 30
    2ed4:	c8 2e       	mov	r12, r24
    2ed6:	d1 2c       	mov	r13, r1
    2ed8:	dc 82       	std	Y+4, r13	; 0x04
    2eda:	cb 82       	std	Y+3, r12	; 0x03
    2edc:	ed 82       	std	Y+5, r14	; 0x05
    2ede:	fe 82       	std	Y+6, r15	; 0x06
    2ee0:	0f 83       	std	Y+7, r16	; 0x07
    2ee2:	18 87       	std	Y+8, r17	; 0x08
    2ee4:	c8 01       	movw	r24, r16
    2ee6:	b7 01       	movw	r22, r14
    2ee8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__clzsi2>
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	18 16       	cp	r1, r24
    2ef0:	19 06       	cpc	r1, r25
    2ef2:	84 f4       	brge	.+32     	; 0x2f14 <__floatsisf+0xaa>
    2ef4:	08 2e       	mov	r0, r24
    2ef6:	04 c0       	rjmp	.+8      	; 0x2f00 <__floatsisf+0x96>
    2ef8:	ee 0c       	add	r14, r14
    2efa:	ff 1c       	adc	r15, r15
    2efc:	00 1f       	adc	r16, r16
    2efe:	11 1f       	adc	r17, r17
    2f00:	0a 94       	dec	r0
    2f02:	d2 f7       	brpl	.-12     	; 0x2ef8 <__floatsisf+0x8e>
    2f04:	ed 82       	std	Y+5, r14	; 0x05
    2f06:	fe 82       	std	Y+6, r15	; 0x06
    2f08:	0f 83       	std	Y+7, r16	; 0x07
    2f0a:	18 87       	std	Y+8, r17	; 0x08
    2f0c:	c8 1a       	sub	r12, r24
    2f0e:	d9 0a       	sbc	r13, r25
    2f10:	dc 82       	std	Y+4, r13	; 0x04
    2f12:	cb 82       	std	Y+3, r12	; 0x03
    2f14:	ba 82       	std	Y+2, r11	; 0x02
    2f16:	ce 01       	movw	r24, r28
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	0e 94 af 18 	call	0x315e	; 0x315e <__pack_f>
    2f1e:	28 96       	adiw	r28, 0x08	; 8
    2f20:	e9 e0       	ldi	r30, 0x09	; 9
    2f22:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x12>

00002f26 <__fixsfsi>:
    2f26:	ac e0       	ldi	r26, 0x0C	; 12
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e9 e9       	ldi	r30, 0x99	; 153
    2f2c:	f7 e1       	ldi	r31, 0x17	; 23
    2f2e:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x20>
    2f32:	69 83       	std	Y+1, r22	; 0x01
    2f34:	7a 83       	std	Y+2, r23	; 0x02
    2f36:	8b 83       	std	Y+3, r24	; 0x03
    2f38:	9c 83       	std	Y+4, r25	; 0x04
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	be 01       	movw	r22, r28
    2f40:	6b 5f       	subi	r22, 0xFB	; 251
    2f42:	7f 4f       	sbci	r23, 0xFF	; 255
    2f44:	0e 94 84 19 	call	0x3308	; 0x3308 <__unpack_f>
    2f48:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4a:	82 30       	cpi	r24, 0x02	; 2
    2f4c:	61 f1       	breq	.+88     	; 0x2fa6 <__fixsfsi+0x80>
    2f4e:	82 30       	cpi	r24, 0x02	; 2
    2f50:	50 f1       	brcs	.+84     	; 0x2fa6 <__fixsfsi+0x80>
    2f52:	84 30       	cpi	r24, 0x04	; 4
    2f54:	21 f4       	brne	.+8      	; 0x2f5e <__fixsfsi+0x38>
    2f56:	8e 81       	ldd	r24, Y+6	; 0x06
    2f58:	88 23       	and	r24, r24
    2f5a:	51 f1       	breq	.+84     	; 0x2fb0 <__fixsfsi+0x8a>
    2f5c:	2e c0       	rjmp	.+92     	; 0x2fba <__fixsfsi+0x94>
    2f5e:	2f 81       	ldd	r18, Y+7	; 0x07
    2f60:	38 85       	ldd	r19, Y+8	; 0x08
    2f62:	37 fd       	sbrc	r19, 7
    2f64:	20 c0       	rjmp	.+64     	; 0x2fa6 <__fixsfsi+0x80>
    2f66:	6e 81       	ldd	r22, Y+6	; 0x06
    2f68:	2f 31       	cpi	r18, 0x1F	; 31
    2f6a:	31 05       	cpc	r19, r1
    2f6c:	1c f0       	brlt	.+6      	; 0x2f74 <__fixsfsi+0x4e>
    2f6e:	66 23       	and	r22, r22
    2f70:	f9 f0       	breq	.+62     	; 0x2fb0 <__fixsfsi+0x8a>
    2f72:	23 c0       	rjmp	.+70     	; 0x2fba <__fixsfsi+0x94>
    2f74:	8e e1       	ldi	r24, 0x1E	; 30
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	82 1b       	sub	r24, r18
    2f7a:	93 0b       	sbc	r25, r19
    2f7c:	29 85       	ldd	r18, Y+9	; 0x09
    2f7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f80:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f82:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <__fixsfsi+0x68>
    2f86:	56 95       	lsr	r21
    2f88:	47 95       	ror	r20
    2f8a:	37 95       	ror	r19
    2f8c:	27 95       	ror	r18
    2f8e:	8a 95       	dec	r24
    2f90:	d2 f7       	brpl	.-12     	; 0x2f86 <__fixsfsi+0x60>
    2f92:	66 23       	and	r22, r22
    2f94:	b1 f0       	breq	.+44     	; 0x2fc2 <__fixsfsi+0x9c>
    2f96:	50 95       	com	r21
    2f98:	40 95       	com	r20
    2f9a:	30 95       	com	r19
    2f9c:	21 95       	neg	r18
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	4f 4f       	sbci	r20, 0xFF	; 255
    2fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa4:	0e c0       	rjmp	.+28     	; 0x2fc2 <__fixsfsi+0x9c>
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	50 e0       	ldi	r21, 0x00	; 0
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <__fixsfsi+0x9c>
    2fb0:	2f ef       	ldi	r18, 0xFF	; 255
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f ef       	ldi	r20, 0xFF	; 255
    2fb6:	5f e7       	ldi	r21, 0x7F	; 127
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <__fixsfsi+0x9c>
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	50 e8       	ldi	r21, 0x80	; 128
    2fc2:	b9 01       	movw	r22, r18
    2fc4:	ca 01       	movw	r24, r20
    2fc6:	2c 96       	adiw	r28, 0x0c	; 12
    2fc8:	e2 e0       	ldi	r30, 0x02	; 2
    2fca:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x20>

00002fce <__floatunsisf>:
    2fce:	a8 e0       	ldi	r26, 0x08	; 8
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	ed ee       	ldi	r30, 0xED	; 237
    2fd4:	f7 e1       	ldi	r31, 0x17	; 23
    2fd6:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x10>
    2fda:	7b 01       	movw	r14, r22
    2fdc:	8c 01       	movw	r16, r24
    2fde:	61 15       	cp	r22, r1
    2fe0:	71 05       	cpc	r23, r1
    2fe2:	81 05       	cpc	r24, r1
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	19 f4       	brne	.+6      	; 0x2fee <__floatunsisf+0x20>
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	60 c0       	rjmp	.+192    	; 0x30ae <__floatunsisf+0xe0>
    2fee:	83 e0       	ldi	r24, 0x03	; 3
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	8e e1       	ldi	r24, 0x1E	; 30
    2ff4:	c8 2e       	mov	r12, r24
    2ff6:	d1 2c       	mov	r13, r1
    2ff8:	dc 82       	std	Y+4, r13	; 0x04
    2ffa:	cb 82       	std	Y+3, r12	; 0x03
    2ffc:	ed 82       	std	Y+5, r14	; 0x05
    2ffe:	fe 82       	std	Y+6, r15	; 0x06
    3000:	0f 83       	std	Y+7, r16	; 0x07
    3002:	18 87       	std	Y+8, r17	; 0x08
    3004:	c8 01       	movw	r24, r16
    3006:	b7 01       	movw	r22, r14
    3008:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__clzsi2>
    300c:	fc 01       	movw	r30, r24
    300e:	31 97       	sbiw	r30, 0x01	; 1
    3010:	f7 ff       	sbrs	r31, 7
    3012:	3b c0       	rjmp	.+118    	; 0x308a <__floatunsisf+0xbc>
    3014:	22 27       	eor	r18, r18
    3016:	33 27       	eor	r19, r19
    3018:	2e 1b       	sub	r18, r30
    301a:	3f 0b       	sbc	r19, r31
    301c:	57 01       	movw	r10, r14
    301e:	68 01       	movw	r12, r16
    3020:	02 2e       	mov	r0, r18
    3022:	04 c0       	rjmp	.+8      	; 0x302c <__floatunsisf+0x5e>
    3024:	d6 94       	lsr	r13
    3026:	c7 94       	ror	r12
    3028:	b7 94       	ror	r11
    302a:	a7 94       	ror	r10
    302c:	0a 94       	dec	r0
    302e:	d2 f7       	brpl	.-12     	; 0x3024 <__floatunsisf+0x56>
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e0       	ldi	r26, 0x00	; 0
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	04 c0       	rjmp	.+8      	; 0x304a <__floatunsisf+0x7c>
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	aa 1f       	adc	r26, r26
    3048:	bb 1f       	adc	r27, r27
    304a:	2a 95       	dec	r18
    304c:	d2 f7       	brpl	.-12     	; 0x3042 <__floatunsisf+0x74>
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	a1 09       	sbc	r26, r1
    3052:	b1 09       	sbc	r27, r1
    3054:	8e 21       	and	r24, r14
    3056:	9f 21       	and	r25, r15
    3058:	a0 23       	and	r26, r16
    305a:	b1 23       	and	r27, r17
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	a1 05       	cpc	r26, r1
    3060:	b1 05       	cpc	r27, r1
    3062:	21 f0       	breq	.+8      	; 0x306c <__floatunsisf+0x9e>
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	60 e0       	ldi	r22, 0x00	; 0
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	4a 29       	or	r20, r10
    306e:	5b 29       	or	r21, r11
    3070:	6c 29       	or	r22, r12
    3072:	7d 29       	or	r23, r13
    3074:	4d 83       	std	Y+5, r20	; 0x05
    3076:	5e 83       	std	Y+6, r21	; 0x06
    3078:	6f 83       	std	Y+7, r22	; 0x07
    307a:	78 87       	std	Y+8, r23	; 0x08
    307c:	8e e1       	ldi	r24, 0x1E	; 30
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	8e 1b       	sub	r24, r30
    3082:	9f 0b       	sbc	r25, r31
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	8b 83       	std	Y+3, r24	; 0x03
    3088:	12 c0       	rjmp	.+36     	; 0x30ae <__floatunsisf+0xe0>
    308a:	30 97       	sbiw	r30, 0x00	; 0
    308c:	81 f0       	breq	.+32     	; 0x30ae <__floatunsisf+0xe0>
    308e:	0e 2e       	mov	r0, r30
    3090:	04 c0       	rjmp	.+8      	; 0x309a <__floatunsisf+0xcc>
    3092:	ee 0c       	add	r14, r14
    3094:	ff 1c       	adc	r15, r15
    3096:	00 1f       	adc	r16, r16
    3098:	11 1f       	adc	r17, r17
    309a:	0a 94       	dec	r0
    309c:	d2 f7       	brpl	.-12     	; 0x3092 <__floatunsisf+0xc4>
    309e:	ed 82       	std	Y+5, r14	; 0x05
    30a0:	fe 82       	std	Y+6, r15	; 0x06
    30a2:	0f 83       	std	Y+7, r16	; 0x07
    30a4:	18 87       	std	Y+8, r17	; 0x08
    30a6:	ce 1a       	sub	r12, r30
    30a8:	df 0a       	sbc	r13, r31
    30aa:	dc 82       	std	Y+4, r13	; 0x04
    30ac:	cb 82       	std	Y+3, r12	; 0x03
    30ae:	1a 82       	std	Y+2, r1	; 0x02
    30b0:	ce 01       	movw	r24, r28
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	0e 94 af 18 	call	0x315e	; 0x315e <__pack_f>
    30b8:	28 96       	adiw	r28, 0x08	; 8
    30ba:	ea e0       	ldi	r30, 0x0A	; 10
    30bc:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x10>

000030c0 <__clzsi2>:
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	7b 01       	movw	r14, r22
    30ca:	8c 01       	movw	r16, r24
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	e8 16       	cp	r14, r24
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	f8 06       	cpc	r15, r24
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	08 07       	cpc	r16, r24
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	18 07       	cpc	r17, r24
    30dc:	88 f4       	brcc	.+34     	; 0x3100 <__clzsi2+0x40>
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	e8 16       	cp	r14, r24
    30e2:	f1 04       	cpc	r15, r1
    30e4:	01 05       	cpc	r16, r1
    30e6:	11 05       	cpc	r17, r1
    30e8:	31 f0       	breq	.+12     	; 0x30f6 <__clzsi2+0x36>
    30ea:	28 f0       	brcs	.+10     	; 0x30f6 <__clzsi2+0x36>
    30ec:	88 e0       	ldi	r24, 0x08	; 8
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	a0 e0       	ldi	r26, 0x00	; 0
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	17 c0       	rjmp	.+46     	; 0x3124 <__clzsi2+0x64>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e0       	ldi	r26, 0x00	; 0
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	12 c0       	rjmp	.+36     	; 0x3124 <__clzsi2+0x64>
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	e8 16       	cp	r14, r24
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	f8 06       	cpc	r15, r24
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	08 07       	cpc	r16, r24
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	18 07       	cpc	r17, r24
    3110:	28 f0       	brcs	.+10     	; 0x311c <__clzsi2+0x5c>
    3112:	88 e1       	ldi	r24, 0x18	; 24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	a0 e0       	ldi	r26, 0x00	; 0
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	04 c0       	rjmp	.+8      	; 0x3124 <__clzsi2+0x64>
    311c:	80 e1       	ldi	r24, 0x10	; 16
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a0 e0       	ldi	r26, 0x00	; 0
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	20 e2       	ldi	r18, 0x20	; 32
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	28 1b       	sub	r18, r24
    312e:	39 0b       	sbc	r19, r25
    3130:	4a 0b       	sbc	r20, r26
    3132:	5b 0b       	sbc	r21, r27
    3134:	04 c0       	rjmp	.+8      	; 0x313e <__clzsi2+0x7e>
    3136:	16 95       	lsr	r17
    3138:	07 95       	ror	r16
    313a:	f7 94       	ror	r15
    313c:	e7 94       	ror	r14
    313e:	8a 95       	dec	r24
    3140:	d2 f7       	brpl	.-12     	; 0x3136 <__clzsi2+0x76>
    3142:	f7 01       	movw	r30, r14
    3144:	e4 5e       	subi	r30, 0xE4	; 228
    3146:	fd 4f       	sbci	r31, 0xFD	; 253
    3148:	80 81       	ld	r24, Z
    314a:	28 1b       	sub	r18, r24
    314c:	31 09       	sbc	r19, r1
    314e:	41 09       	sbc	r20, r1
    3150:	51 09       	sbc	r21, r1
    3152:	c9 01       	movw	r24, r18
    3154:	1f 91       	pop	r17
    3156:	0f 91       	pop	r16
    3158:	ff 90       	pop	r15
    315a:	ef 90       	pop	r14
    315c:	08 95       	ret

0000315e <__pack_f>:
    315e:	df 92       	push	r13
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	fc 01       	movw	r30, r24
    316a:	e4 80       	ldd	r14, Z+4	; 0x04
    316c:	f5 80       	ldd	r15, Z+5	; 0x05
    316e:	06 81       	ldd	r16, Z+6	; 0x06
    3170:	17 81       	ldd	r17, Z+7	; 0x07
    3172:	d1 80       	ldd	r13, Z+1	; 0x01
    3174:	80 81       	ld	r24, Z
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	48 f4       	brcc	.+18     	; 0x318c <__pack_f+0x2e>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	a0 e1       	ldi	r26, 0x10	; 16
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e8 2a       	or	r14, r24
    3184:	f9 2a       	or	r15, r25
    3186:	0a 2b       	or	r16, r26
    3188:	1b 2b       	or	r17, r27
    318a:	a5 c0       	rjmp	.+330    	; 0x32d6 <__pack_f+0x178>
    318c:	84 30       	cpi	r24, 0x04	; 4
    318e:	09 f4       	brne	.+2      	; 0x3192 <__pack_f+0x34>
    3190:	9f c0       	rjmp	.+318    	; 0x32d0 <__pack_f+0x172>
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	21 f4       	brne	.+8      	; 0x319e <__pack_f+0x40>
    3196:	ee 24       	eor	r14, r14
    3198:	ff 24       	eor	r15, r15
    319a:	87 01       	movw	r16, r14
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <__pack_f+0x4a>
    319e:	e1 14       	cp	r14, r1
    31a0:	f1 04       	cpc	r15, r1
    31a2:	01 05       	cpc	r16, r1
    31a4:	11 05       	cpc	r17, r1
    31a6:	19 f4       	brne	.+6      	; 0x31ae <__pack_f+0x50>
    31a8:	e0 e0       	ldi	r30, 0x00	; 0
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	96 c0       	rjmp	.+300    	; 0x32da <__pack_f+0x17c>
    31ae:	62 81       	ldd	r22, Z+2	; 0x02
    31b0:	73 81       	ldd	r23, Z+3	; 0x03
    31b2:	9f ef       	ldi	r25, 0xFF	; 255
    31b4:	62 38       	cpi	r22, 0x82	; 130
    31b6:	79 07       	cpc	r23, r25
    31b8:	0c f0       	brlt	.+2      	; 0x31bc <__pack_f+0x5e>
    31ba:	5b c0       	rjmp	.+182    	; 0x3272 <__pack_f+0x114>
    31bc:	22 e8       	ldi	r18, 0x82	; 130
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	26 1b       	sub	r18, r22
    31c2:	37 0b       	sbc	r19, r23
    31c4:	2a 31       	cpi	r18, 0x1A	; 26
    31c6:	31 05       	cpc	r19, r1
    31c8:	2c f0       	brlt	.+10     	; 0x31d4 <__pack_f+0x76>
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	2a c0       	rjmp	.+84     	; 0x3228 <__pack_f+0xca>
    31d4:	b8 01       	movw	r22, r16
    31d6:	a7 01       	movw	r20, r14
    31d8:	02 2e       	mov	r0, r18
    31da:	04 c0       	rjmp	.+8      	; 0x31e4 <__pack_f+0x86>
    31dc:	76 95       	lsr	r23
    31de:	67 95       	ror	r22
    31e0:	57 95       	ror	r21
    31e2:	47 95       	ror	r20
    31e4:	0a 94       	dec	r0
    31e6:	d2 f7       	brpl	.-12     	; 0x31dc <__pack_f+0x7e>
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e0       	ldi	r26, 0x00	; 0
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	04 c0       	rjmp	.+8      	; 0x31fa <__pack_f+0x9c>
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	aa 1f       	adc	r26, r26
    31f8:	bb 1f       	adc	r27, r27
    31fa:	2a 95       	dec	r18
    31fc:	d2 f7       	brpl	.-12     	; 0x31f2 <__pack_f+0x94>
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	a1 09       	sbc	r26, r1
    3202:	b1 09       	sbc	r27, r1
    3204:	8e 21       	and	r24, r14
    3206:	9f 21       	and	r25, r15
    3208:	a0 23       	and	r26, r16
    320a:	b1 23       	and	r27, r17
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	a1 05       	cpc	r26, r1
    3210:	b1 05       	cpc	r27, r1
    3212:	21 f0       	breq	.+8      	; 0x321c <__pack_f+0xbe>
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a0 e0       	ldi	r26, 0x00	; 0
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	9a 01       	movw	r18, r20
    321e:	ab 01       	movw	r20, r22
    3220:	28 2b       	or	r18, r24
    3222:	39 2b       	or	r19, r25
    3224:	4a 2b       	or	r20, r26
    3226:	5b 2b       	or	r21, r27
    3228:	da 01       	movw	r26, r20
    322a:	c9 01       	movw	r24, r18
    322c:	8f 77       	andi	r24, 0x7F	; 127
    322e:	90 70       	andi	r25, 0x00	; 0
    3230:	a0 70       	andi	r26, 0x00	; 0
    3232:	b0 70       	andi	r27, 0x00	; 0
    3234:	80 34       	cpi	r24, 0x40	; 64
    3236:	91 05       	cpc	r25, r1
    3238:	a1 05       	cpc	r26, r1
    323a:	b1 05       	cpc	r27, r1
    323c:	39 f4       	brne	.+14     	; 0x324c <__pack_f+0xee>
    323e:	27 ff       	sbrs	r18, 7
    3240:	09 c0       	rjmp	.+18     	; 0x3254 <__pack_f+0xf6>
    3242:	20 5c       	subi	r18, 0xC0	; 192
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	4f 4f       	sbci	r20, 0xFF	; 255
    3248:	5f 4f       	sbci	r21, 0xFF	; 255
    324a:	04 c0       	rjmp	.+8      	; 0x3254 <__pack_f+0xf6>
    324c:	21 5c       	subi	r18, 0xC1	; 193
    324e:	3f 4f       	sbci	r19, 0xFF	; 255
    3250:	4f 4f       	sbci	r20, 0xFF	; 255
    3252:	5f 4f       	sbci	r21, 0xFF	; 255
    3254:	e0 e0       	ldi	r30, 0x00	; 0
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	20 30       	cpi	r18, 0x00	; 0
    325a:	a0 e0       	ldi	r26, 0x00	; 0
    325c:	3a 07       	cpc	r19, r26
    325e:	a0 e0       	ldi	r26, 0x00	; 0
    3260:	4a 07       	cpc	r20, r26
    3262:	a0 e4       	ldi	r26, 0x40	; 64
    3264:	5a 07       	cpc	r21, r26
    3266:	10 f0       	brcs	.+4      	; 0x326c <__pack_f+0x10e>
    3268:	e1 e0       	ldi	r30, 0x01	; 1
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	79 01       	movw	r14, r18
    326e:	8a 01       	movw	r16, r20
    3270:	27 c0       	rjmp	.+78     	; 0x32c0 <__pack_f+0x162>
    3272:	60 38       	cpi	r22, 0x80	; 128
    3274:	71 05       	cpc	r23, r1
    3276:	64 f5       	brge	.+88     	; 0x32d0 <__pack_f+0x172>
    3278:	fb 01       	movw	r30, r22
    327a:	e1 58       	subi	r30, 0x81	; 129
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	d8 01       	movw	r26, r16
    3280:	c7 01       	movw	r24, r14
    3282:	8f 77       	andi	r24, 0x7F	; 127
    3284:	90 70       	andi	r25, 0x00	; 0
    3286:	a0 70       	andi	r26, 0x00	; 0
    3288:	b0 70       	andi	r27, 0x00	; 0
    328a:	80 34       	cpi	r24, 0x40	; 64
    328c:	91 05       	cpc	r25, r1
    328e:	a1 05       	cpc	r26, r1
    3290:	b1 05       	cpc	r27, r1
    3292:	39 f4       	brne	.+14     	; 0x32a2 <__pack_f+0x144>
    3294:	e7 fe       	sbrs	r14, 7
    3296:	0d c0       	rjmp	.+26     	; 0x32b2 <__pack_f+0x154>
    3298:	80 e4       	ldi	r24, 0x40	; 64
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	a0 e0       	ldi	r26, 0x00	; 0
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	04 c0       	rjmp	.+8      	; 0x32aa <__pack_f+0x14c>
    32a2:	8f e3       	ldi	r24, 0x3F	; 63
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	a0 e0       	ldi	r26, 0x00	; 0
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e8 0e       	add	r14, r24
    32ac:	f9 1e       	adc	r15, r25
    32ae:	0a 1f       	adc	r16, r26
    32b0:	1b 1f       	adc	r17, r27
    32b2:	17 ff       	sbrs	r17, 7
    32b4:	05 c0       	rjmp	.+10     	; 0x32c0 <__pack_f+0x162>
    32b6:	16 95       	lsr	r17
    32b8:	07 95       	ror	r16
    32ba:	f7 94       	ror	r15
    32bc:	e7 94       	ror	r14
    32be:	31 96       	adiw	r30, 0x01	; 1
    32c0:	87 e0       	ldi	r24, 0x07	; 7
    32c2:	16 95       	lsr	r17
    32c4:	07 95       	ror	r16
    32c6:	f7 94       	ror	r15
    32c8:	e7 94       	ror	r14
    32ca:	8a 95       	dec	r24
    32cc:	d1 f7       	brne	.-12     	; 0x32c2 <__pack_f+0x164>
    32ce:	05 c0       	rjmp	.+10     	; 0x32da <__pack_f+0x17c>
    32d0:	ee 24       	eor	r14, r14
    32d2:	ff 24       	eor	r15, r15
    32d4:	87 01       	movw	r16, r14
    32d6:	ef ef       	ldi	r30, 0xFF	; 255
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	6e 2f       	mov	r22, r30
    32dc:	67 95       	ror	r22
    32de:	66 27       	eor	r22, r22
    32e0:	67 95       	ror	r22
    32e2:	90 2f       	mov	r25, r16
    32e4:	9f 77       	andi	r25, 0x7F	; 127
    32e6:	d7 94       	ror	r13
    32e8:	dd 24       	eor	r13, r13
    32ea:	d7 94       	ror	r13
    32ec:	8e 2f       	mov	r24, r30
    32ee:	86 95       	lsr	r24
    32f0:	49 2f       	mov	r20, r25
    32f2:	46 2b       	or	r20, r22
    32f4:	58 2f       	mov	r21, r24
    32f6:	5d 29       	or	r21, r13
    32f8:	b7 01       	movw	r22, r14
    32fa:	ca 01       	movw	r24, r20
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	ff 90       	pop	r15
    3302:	ef 90       	pop	r14
    3304:	df 90       	pop	r13
    3306:	08 95       	ret

00003308 <__unpack_f>:
    3308:	fc 01       	movw	r30, r24
    330a:	db 01       	movw	r26, r22
    330c:	40 81       	ld	r20, Z
    330e:	51 81       	ldd	r21, Z+1	; 0x01
    3310:	22 81       	ldd	r18, Z+2	; 0x02
    3312:	62 2f       	mov	r22, r18
    3314:	6f 77       	andi	r22, 0x7F	; 127
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	22 1f       	adc	r18, r18
    331a:	22 27       	eor	r18, r18
    331c:	22 1f       	adc	r18, r18
    331e:	93 81       	ldd	r25, Z+3	; 0x03
    3320:	89 2f       	mov	r24, r25
    3322:	88 0f       	add	r24, r24
    3324:	82 2b       	or	r24, r18
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	99 1f       	adc	r25, r25
    332c:	99 27       	eor	r25, r25
    332e:	99 1f       	adc	r25, r25
    3330:	11 96       	adiw	r26, 0x01	; 1
    3332:	9c 93       	st	X, r25
    3334:	11 97       	sbiw	r26, 0x01	; 1
    3336:	21 15       	cp	r18, r1
    3338:	31 05       	cpc	r19, r1
    333a:	a9 f5       	brne	.+106    	; 0x33a6 <__unpack_f+0x9e>
    333c:	41 15       	cp	r20, r1
    333e:	51 05       	cpc	r21, r1
    3340:	61 05       	cpc	r22, r1
    3342:	71 05       	cpc	r23, r1
    3344:	11 f4       	brne	.+4      	; 0x334a <__unpack_f+0x42>
    3346:	82 e0       	ldi	r24, 0x02	; 2
    3348:	37 c0       	rjmp	.+110    	; 0x33b8 <__unpack_f+0xb0>
    334a:	82 e8       	ldi	r24, 0x82	; 130
    334c:	9f ef       	ldi	r25, 0xFF	; 255
    334e:	13 96       	adiw	r26, 0x03	; 3
    3350:	9c 93       	st	X, r25
    3352:	8e 93       	st	-X, r24
    3354:	12 97       	sbiw	r26, 0x02	; 2
    3356:	9a 01       	movw	r18, r20
    3358:	ab 01       	movw	r20, r22
    335a:	67 e0       	ldi	r22, 0x07	; 7
    335c:	22 0f       	add	r18, r18
    335e:	33 1f       	adc	r19, r19
    3360:	44 1f       	adc	r20, r20
    3362:	55 1f       	adc	r21, r21
    3364:	6a 95       	dec	r22
    3366:	d1 f7       	brne	.-12     	; 0x335c <__unpack_f+0x54>
    3368:	83 e0       	ldi	r24, 0x03	; 3
    336a:	8c 93       	st	X, r24
    336c:	0d c0       	rjmp	.+26     	; 0x3388 <__unpack_f+0x80>
    336e:	22 0f       	add	r18, r18
    3370:	33 1f       	adc	r19, r19
    3372:	44 1f       	adc	r20, r20
    3374:	55 1f       	adc	r21, r21
    3376:	12 96       	adiw	r26, 0x02	; 2
    3378:	8d 91       	ld	r24, X+
    337a:	9c 91       	ld	r25, X
    337c:	13 97       	sbiw	r26, 0x03	; 3
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	13 96       	adiw	r26, 0x03	; 3
    3382:	9c 93       	st	X, r25
    3384:	8e 93       	st	-X, r24
    3386:	12 97       	sbiw	r26, 0x02	; 2
    3388:	20 30       	cpi	r18, 0x00	; 0
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	38 07       	cpc	r19, r24
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	48 07       	cpc	r20, r24
    3392:	80 e4       	ldi	r24, 0x40	; 64
    3394:	58 07       	cpc	r21, r24
    3396:	58 f3       	brcs	.-42     	; 0x336e <__unpack_f+0x66>
    3398:	14 96       	adiw	r26, 0x04	; 4
    339a:	2d 93       	st	X+, r18
    339c:	3d 93       	st	X+, r19
    339e:	4d 93       	st	X+, r20
    33a0:	5c 93       	st	X, r21
    33a2:	17 97       	sbiw	r26, 0x07	; 7
    33a4:	08 95       	ret
    33a6:	2f 3f       	cpi	r18, 0xFF	; 255
    33a8:	31 05       	cpc	r19, r1
    33aa:	79 f4       	brne	.+30     	; 0x33ca <__unpack_f+0xc2>
    33ac:	41 15       	cp	r20, r1
    33ae:	51 05       	cpc	r21, r1
    33b0:	61 05       	cpc	r22, r1
    33b2:	71 05       	cpc	r23, r1
    33b4:	19 f4       	brne	.+6      	; 0x33bc <__unpack_f+0xb4>
    33b6:	84 e0       	ldi	r24, 0x04	; 4
    33b8:	8c 93       	st	X, r24
    33ba:	08 95       	ret
    33bc:	64 ff       	sbrs	r22, 4
    33be:	03 c0       	rjmp	.+6      	; 0x33c6 <__unpack_f+0xbe>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	8c 93       	st	X, r24
    33c4:	12 c0       	rjmp	.+36     	; 0x33ea <__unpack_f+0xe2>
    33c6:	1c 92       	st	X, r1
    33c8:	10 c0       	rjmp	.+32     	; 0x33ea <__unpack_f+0xe2>
    33ca:	2f 57       	subi	r18, 0x7F	; 127
    33cc:	30 40       	sbci	r19, 0x00	; 0
    33ce:	13 96       	adiw	r26, 0x03	; 3
    33d0:	3c 93       	st	X, r19
    33d2:	2e 93       	st	-X, r18
    33d4:	12 97       	sbiw	r26, 0x02	; 2
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	8c 93       	st	X, r24
    33da:	87 e0       	ldi	r24, 0x07	; 7
    33dc:	44 0f       	add	r20, r20
    33de:	55 1f       	adc	r21, r21
    33e0:	66 1f       	adc	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	8a 95       	dec	r24
    33e6:	d1 f7       	brne	.-12     	; 0x33dc <__unpack_f+0xd4>
    33e8:	70 64       	ori	r23, 0x40	; 64
    33ea:	14 96       	adiw	r26, 0x04	; 4
    33ec:	4d 93       	st	X+, r20
    33ee:	5d 93       	st	X+, r21
    33f0:	6d 93       	st	X+, r22
    33f2:	7c 93       	st	X, r23
    33f4:	17 97       	sbiw	r26, 0x07	; 7
    33f6:	08 95       	ret

000033f8 <__fpcmp_parts_f>:
    33f8:	1f 93       	push	r17
    33fa:	dc 01       	movw	r26, r24
    33fc:	fb 01       	movw	r30, r22
    33fe:	9c 91       	ld	r25, X
    3400:	92 30       	cpi	r25, 0x02	; 2
    3402:	08 f4       	brcc	.+2      	; 0x3406 <__fpcmp_parts_f+0xe>
    3404:	47 c0       	rjmp	.+142    	; 0x3494 <__fpcmp_parts_f+0x9c>
    3406:	80 81       	ld	r24, Z
    3408:	82 30       	cpi	r24, 0x02	; 2
    340a:	08 f4       	brcc	.+2      	; 0x340e <__fpcmp_parts_f+0x16>
    340c:	43 c0       	rjmp	.+134    	; 0x3494 <__fpcmp_parts_f+0x9c>
    340e:	94 30       	cpi	r25, 0x04	; 4
    3410:	51 f4       	brne	.+20     	; 0x3426 <__fpcmp_parts_f+0x2e>
    3412:	11 96       	adiw	r26, 0x01	; 1
    3414:	1c 91       	ld	r17, X
    3416:	84 30       	cpi	r24, 0x04	; 4
    3418:	99 f5       	brne	.+102    	; 0x3480 <__fpcmp_parts_f+0x88>
    341a:	81 81       	ldd	r24, Z+1	; 0x01
    341c:	68 2f       	mov	r22, r24
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	61 1b       	sub	r22, r17
    3422:	71 09       	sbc	r23, r1
    3424:	3f c0       	rjmp	.+126    	; 0x34a4 <__fpcmp_parts_f+0xac>
    3426:	84 30       	cpi	r24, 0x04	; 4
    3428:	21 f0       	breq	.+8      	; 0x3432 <__fpcmp_parts_f+0x3a>
    342a:	92 30       	cpi	r25, 0x02	; 2
    342c:	31 f4       	brne	.+12     	; 0x343a <__fpcmp_parts_f+0x42>
    342e:	82 30       	cpi	r24, 0x02	; 2
    3430:	b9 f1       	breq	.+110    	; 0x34a0 <__fpcmp_parts_f+0xa8>
    3432:	81 81       	ldd	r24, Z+1	; 0x01
    3434:	88 23       	and	r24, r24
    3436:	89 f1       	breq	.+98     	; 0x349a <__fpcmp_parts_f+0xa2>
    3438:	2d c0       	rjmp	.+90     	; 0x3494 <__fpcmp_parts_f+0x9c>
    343a:	11 96       	adiw	r26, 0x01	; 1
    343c:	1c 91       	ld	r17, X
    343e:	11 97       	sbiw	r26, 0x01	; 1
    3440:	82 30       	cpi	r24, 0x02	; 2
    3442:	f1 f0       	breq	.+60     	; 0x3480 <__fpcmp_parts_f+0x88>
    3444:	81 81       	ldd	r24, Z+1	; 0x01
    3446:	18 17       	cp	r17, r24
    3448:	d9 f4       	brne	.+54     	; 0x3480 <__fpcmp_parts_f+0x88>
    344a:	12 96       	adiw	r26, 0x02	; 2
    344c:	2d 91       	ld	r18, X+
    344e:	3c 91       	ld	r19, X
    3450:	13 97       	sbiw	r26, 0x03	; 3
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	82 17       	cp	r24, r18
    3458:	93 07       	cpc	r25, r19
    345a:	94 f0       	brlt	.+36     	; 0x3480 <__fpcmp_parts_f+0x88>
    345c:	28 17       	cp	r18, r24
    345e:	39 07       	cpc	r19, r25
    3460:	bc f0       	brlt	.+46     	; 0x3490 <__fpcmp_parts_f+0x98>
    3462:	14 96       	adiw	r26, 0x04	; 4
    3464:	8d 91       	ld	r24, X+
    3466:	9d 91       	ld	r25, X+
    3468:	0d 90       	ld	r0, X+
    346a:	bc 91       	ld	r27, X
    346c:	a0 2d       	mov	r26, r0
    346e:	24 81       	ldd	r18, Z+4	; 0x04
    3470:	35 81       	ldd	r19, Z+5	; 0x05
    3472:	46 81       	ldd	r20, Z+6	; 0x06
    3474:	57 81       	ldd	r21, Z+7	; 0x07
    3476:	28 17       	cp	r18, r24
    3478:	39 07       	cpc	r19, r25
    347a:	4a 07       	cpc	r20, r26
    347c:	5b 07       	cpc	r21, r27
    347e:	18 f4       	brcc	.+6      	; 0x3486 <__fpcmp_parts_f+0x8e>
    3480:	11 23       	and	r17, r17
    3482:	41 f0       	breq	.+16     	; 0x3494 <__fpcmp_parts_f+0x9c>
    3484:	0a c0       	rjmp	.+20     	; 0x349a <__fpcmp_parts_f+0xa2>
    3486:	82 17       	cp	r24, r18
    3488:	93 07       	cpc	r25, r19
    348a:	a4 07       	cpc	r26, r20
    348c:	b5 07       	cpc	r27, r21
    348e:	40 f4       	brcc	.+16     	; 0x34a0 <__fpcmp_parts_f+0xa8>
    3490:	11 23       	and	r17, r17
    3492:	19 f0       	breq	.+6      	; 0x349a <__fpcmp_parts_f+0xa2>
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <__fpcmp_parts_f+0xac>
    349a:	6f ef       	ldi	r22, 0xFF	; 255
    349c:	7f ef       	ldi	r23, 0xFF	; 255
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <__fpcmp_parts_f+0xac>
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	cb 01       	movw	r24, r22
    34a6:	1f 91       	pop	r17
    34a8:	08 95       	ret

000034aa <itoa>:
    34aa:	fb 01       	movw	r30, r22
    34ac:	9f 01       	movw	r18, r30
    34ae:	e8 94       	clt
    34b0:	42 30       	cpi	r20, 0x02	; 2
    34b2:	c4 f0       	brlt	.+48     	; 0x34e4 <itoa+0x3a>
    34b4:	45 32       	cpi	r20, 0x25	; 37
    34b6:	b4 f4       	brge	.+44     	; 0x34e4 <itoa+0x3a>
    34b8:	4a 30       	cpi	r20, 0x0A	; 10
    34ba:	29 f4       	brne	.+10     	; 0x34c6 <itoa+0x1c>
    34bc:	97 fb       	bst	r25, 7
    34be:	1e f4       	brtc	.+6      	; 0x34c6 <itoa+0x1c>
    34c0:	90 95       	com	r25
    34c2:	81 95       	neg	r24
    34c4:	9f 4f       	sbci	r25, 0xFF	; 255
    34c6:	64 2f       	mov	r22, r20
    34c8:	77 27       	eor	r23, r23
    34ca:	0e 94 86 1a 	call	0x350c	; 0x350c <__udivmodhi4>
    34ce:	80 5d       	subi	r24, 0xD0	; 208
    34d0:	8a 33       	cpi	r24, 0x3A	; 58
    34d2:	0c f0       	brlt	.+2      	; 0x34d6 <itoa+0x2c>
    34d4:	89 5d       	subi	r24, 0xD9	; 217
    34d6:	81 93       	st	Z+, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	a1 f7       	brne	.-24     	; 0x34c6 <itoa+0x1c>
    34de:	16 f4       	brtc	.+4      	; 0x34e4 <itoa+0x3a>
    34e0:	5d e2       	ldi	r21, 0x2D	; 45
    34e2:	51 93       	st	Z+, r21
    34e4:	10 82       	st	Z, r1
    34e6:	c9 01       	movw	r24, r18
    34e8:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <strrev>

000034ec <strrev>:
    34ec:	dc 01       	movw	r26, r24
    34ee:	fc 01       	movw	r30, r24
    34f0:	67 2f       	mov	r22, r23
    34f2:	71 91       	ld	r23, Z+
    34f4:	77 23       	and	r23, r23
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <strrev+0x4>
    34f8:	32 97       	sbiw	r30, 0x02	; 2
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <strrev+0x18>
    34fc:	7c 91       	ld	r23, X
    34fe:	6d 93       	st	X+, r22
    3500:	70 83       	st	Z, r23
    3502:	62 91       	ld	r22, -Z
    3504:	ae 17       	cp	r26, r30
    3506:	bf 07       	cpc	r27, r31
    3508:	c8 f3       	brcs	.-14     	; 0x34fc <strrev+0x10>
    350a:	08 95       	ret

0000350c <__udivmodhi4>:
    350c:	aa 1b       	sub	r26, r26
    350e:	bb 1b       	sub	r27, r27
    3510:	51 e1       	ldi	r21, 0x11	; 17
    3512:	07 c0       	rjmp	.+14     	; 0x3522 <__udivmodhi4_ep>

00003514 <__udivmodhi4_loop>:
    3514:	aa 1f       	adc	r26, r26
    3516:	bb 1f       	adc	r27, r27
    3518:	a6 17       	cp	r26, r22
    351a:	b7 07       	cpc	r27, r23
    351c:	10 f0       	brcs	.+4      	; 0x3522 <__udivmodhi4_ep>
    351e:	a6 1b       	sub	r26, r22
    3520:	b7 0b       	sbc	r27, r23

00003522 <__udivmodhi4_ep>:
    3522:	88 1f       	adc	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	5a 95       	dec	r21
    3528:	a9 f7       	brne	.-22     	; 0x3514 <__udivmodhi4_loop>
    352a:	80 95       	com	r24
    352c:	90 95       	com	r25
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	08 95       	ret

00003534 <__prologue_saves__>:
    3534:	2f 92       	push	r2
    3536:	3f 92       	push	r3
    3538:	4f 92       	push	r4
    353a:	5f 92       	push	r5
    353c:	6f 92       	push	r6
    353e:	7f 92       	push	r7
    3540:	8f 92       	push	r8
    3542:	9f 92       	push	r9
    3544:	af 92       	push	r10
    3546:	bf 92       	push	r11
    3548:	cf 92       	push	r12
    354a:	df 92       	push	r13
    354c:	ef 92       	push	r14
    354e:	ff 92       	push	r15
    3550:	0f 93       	push	r16
    3552:	1f 93       	push	r17
    3554:	cf 93       	push	r28
    3556:	df 93       	push	r29
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	ca 1b       	sub	r28, r26
    355e:	db 0b       	sbc	r29, r27
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	19 94       	eijmp

0000356c <__epilogue_restores__>:
    356c:	2a 88       	ldd	r2, Y+18	; 0x12
    356e:	39 88       	ldd	r3, Y+17	; 0x11
    3570:	48 88       	ldd	r4, Y+16	; 0x10
    3572:	5f 84       	ldd	r5, Y+15	; 0x0f
    3574:	6e 84       	ldd	r6, Y+14	; 0x0e
    3576:	7d 84       	ldd	r7, Y+13	; 0x0d
    3578:	8c 84       	ldd	r8, Y+12	; 0x0c
    357a:	9b 84       	ldd	r9, Y+11	; 0x0b
    357c:	aa 84       	ldd	r10, Y+10	; 0x0a
    357e:	b9 84       	ldd	r11, Y+9	; 0x09
    3580:	c8 84       	ldd	r12, Y+8	; 0x08
    3582:	df 80       	ldd	r13, Y+7	; 0x07
    3584:	ee 80       	ldd	r14, Y+6	; 0x06
    3586:	fd 80       	ldd	r15, Y+5	; 0x05
    3588:	0c 81       	ldd	r16, Y+4	; 0x04
    358a:	1b 81       	ldd	r17, Y+3	; 0x03
    358c:	aa 81       	ldd	r26, Y+2	; 0x02
    358e:	b9 81       	ldd	r27, Y+1	; 0x01
    3590:	ce 0f       	add	r28, r30
    3592:	d1 1d       	adc	r29, r1
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	ed 01       	movw	r28, r26
    35a0:	08 95       	ret

000035a2 <_exit>:
    35a2:	f8 94       	cli

000035a4 <__stop_program>:
    35a4:	ff cf       	rjmp	.-2      	; 0x35a4 <__stop_program>
